
AVRASM ver. 2.2.8  G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 8\CODE\Lab8\Lab8\main.asm Tue Mar 09 20:37:24 2021

[builtin](2): Including file 'D:/Atmel\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m128def.inc'
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 8\CODE\Lab8\Lab8\main.asm(8): Including file 'D:/Atmel\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m128def.inc'
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 8\CODE\Lab8\Lab8\main.asm(678): Including file 'G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 8\CODE\Lab8\Lab8\LCDDriver.asm'
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 8\CODE\Lab8\Lab8\LCDDriver.asm(38): warning: Register r17 already defined by the .DEF directive
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 8\CODE\Lab8\Lab8\main.asm(678): 'G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 8\CODE\Lab8\Lab8\LCDDriver.asm' included form here
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 8\CODE\Lab8\Lab8\LCDDriver.asm(39): warning: Register r18 already defined by the .DEF directive
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 8\CODE\Lab8\Lab8\main.asm(678): 'G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 8\CODE\Lab8\Lab8\LCDDriver.asm' included form here
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 8\CODE\Lab8\Lab8\LCDDriver.asm(40): warning: Register r19 already defined by the .DEF directive
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 8\CODE\Lab8\Lab8\main.asm(678): 'G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 8\CODE\Lab8\Lab8\LCDDriver.asm' included form here
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 8\CODE\Lab8\Lab8\LCDDriver.asm(41): warning: Register r20 already defined by the .DEF directive
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 8\CODE\Lab8\Lab8\main.asm(678): 'G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 8\CODE\Lab8\Lab8\LCDDriver.asm' included form here
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 8\CODE\Lab8\Lab8\LCDDriver.asm(42): warning: Register r21 already defined by the .DEF directive
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 8\CODE\Lab8\Lab8\main.asm(678): 'G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 8\CODE\Lab8\Lab8\LCDDriver.asm' included form here
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 8\CODE\Lab8\Lab8\LCDDriver.asm(43): warning: Register r22 already defined by the .DEF directive
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 8\CODE\Lab8\Lab8\main.asm(678): 'G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 8\CODE\Lab8\Lab8\LCDDriver.asm' included form here
[builtin](2): Including file 'D:/Atmel\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m128def.inc'
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 8\CODE\Lab8\Lab8\main.asm(8): Including file 'D:/Atmel\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m128def.inc'
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 8\CODE\Lab8\Lab8\main.asm(678): Including file 'G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 8\CODE\Lab8\Lab8\LCDDriver.asm'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega128.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m128def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega128
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega128
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M128DEF_INC_
                                 #define _M128DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega128
                                 #pragma AVRPART ADMIN PART_NAME ATmega128
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x97
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UCSR1C	= 0x9d	; MEMORY MAPPED
                                 .equ	UDR1	= 0x9c	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0x9b	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0x9a	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0x98	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0x99	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0x95	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0x90	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x8c	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x8b	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x8a	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x88	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x89	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x86	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x87	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x84	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x85	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x82	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x83	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x80	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x81	; MEMORY MAPPED
                                 .equ	ETIMSK	= 0x7d	; MEMORY MAPPED
                                 .equ	ETIFR	= 0x7c	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x7a	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x78	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x79	; MEMORY MAPPED
                                 .equ	TWCR	= 0x74	; MEMORY MAPPED
                                 .equ	TWDR	= 0x73	; MEMORY MAPPED
                                 .equ	TWAR	= 0x72	; MEMORY MAPPED
                                 .equ	TWSR	= 0x71	; MEMORY MAPPED
                                 .equ	TWBR	= 0x70	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x6f	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x6d	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x6c	; MEMORY MAPPED
                                 .equ	EICRA	= 0x6a	; MEMORY MAPPED
                                 .equ	SPMCSR	= 0x68	; MEMORY MAPPED
                                 .equ	PORTG	= 0x65	; MEMORY MAPPED
                                 .equ	DDRG	= 0x64	; MEMORY MAPPED
                                 .equ	PING	= 0x63	; MEMORY MAPPED
                                 .equ	PORTF	= 0x62	; MEMORY MAPPED
                                 .equ	DDRF	= 0x61	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	XDIV	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	EICRB	= 0x3a
                                 .equ	EIMSK	= 0x39
                                 .equ	EIFR	= 0x38
                                 .equ	TIMSK	= 0x37
                                 .equ	TIFR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OCR0	= 0x31
                                 .equ	ASSR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	OCDR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	SFIOR	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR0	= 0x0c
                                 .equ	UCSR0A	= 0x0b
                                 .equ	UCSR0B	= 0x0a
                                 .equ	UBRR0L	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	PORTE	= 0x03
                                 .equ	DDRE	= 0x02
                                 .equ	PINE	= 0x01
                                 .equ	PINF	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR00	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR01	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR02	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR03	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR04	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR05	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR06	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR07	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	UCSZ2	= UCSZ02	; For compatibility
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL0	= 6	; USART Mode Select
                                 
                                 ; UBRR0H - USART Baud Rate Register Hight Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR10	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR11	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR12	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR13	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR14	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR15	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR16	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR17	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL1	= 6	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register Hight Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	SM2	= 2	; Sleep Mode Select
                                 .equ	SM0	= 3	; Sleep Mode Select
                                 .equ	SM1	= 4	; Sleep Mode Select
                                 .equ	SE	= 5	; Sleep Enable
                                 .equ	SRW10	= 6	; External SRAM Wait State Select
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW11	= 1	; Wait state select bit upper page
                                 .equ	SRW00	= 2	; Wait state select bit lower page
                                 .equ	SRW01	= 3	; Wait state select bit lower page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value
                                 .equ	CAL1	= 1	; Oscillator Calibration Value
                                 .equ	CAL2	= 2	; Oscillator Calibration Value
                                 .equ	CAL3	= 3	; Oscillator Calibration Value
                                 .equ	CAL4	= 4	; Oscillator Calibration Value
                                 .equ	CAL5	= 5	; Oscillator Calibration Value
                                 .equ	CAL6	= 6	; Oscillator Calibration Value
                                 .equ	CAL7	= 7	; Oscillator Calibration Value
                                 
                                 ; XDIV - XTAL Divide Control Register
                                 .equ	XDIV0	= 0	; XTAl Divide Select Bit 0
                                 .equ	XDIV1	= 1	; XTAl Divide Select Bit 1
                                 .equ	XDIV2	= 2	; XTAl Divide Select Bit 2
                                 .equ	XDIV3	= 3	; XTAl Divide Select Bit 3
                                 .equ	XDIV4	= 4	; XTAl Divide Select Bit 4
                                 .equ	XDIV5	= 5	; XTAl Divide Select Bit 5
                                 .equ	XDIV6	= 6	; XTAl Divide Select Bit 6
                                 .equ	XDIVEN	= 7	; XTAL Divide Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMCR	= SPMCSR	; For compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 
                                 ; ***** MISC *************************
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR321	= 0	; Prescaler Reset Timer/Counter3, Timer/Counter2, and Timer/Counter1
                                 .equ	PSR1	= PSR321	; For compatibility
                                 .equ	PSR2	= PSR321	; For compatibility
                                 .equ	PSR3	= PSR321	; For compatibility
                                 .equ	PSR0	= 1	; Prescaler Reset Timer/Counter0
                                 .equ	PUD	= 2	; Pull Up Disable
                                 ;.equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	GICR	= EIMSK	; For compatibility
                                 .equ	GIMSK	= EIMSK	; For compatibility
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	GIFR	= EIFR	; For compatibility
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 0
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; ASSR - Asynchronus Status Register
                                 .equ	TCR0UB	= 0	; Timer/Counter Control Register 0 Update Busy
                                 .equ	OCR0UB	= 1	; Output Compare register 0 Busy
                                 .equ	TCN0UB	= 2	; Timer/Counter0 Update Busy
                                 .equ	AS0	= 3	; Asynchronus Timer/Counter 0
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR0	= 1	; Prescaler Reset Timer/Counter0
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; ETIMSK - Extended Timer/Counter Interrupt Mask Register
                                 .equ	OCIE1C	= 0	; Timer/Counter 1, Output Compare Match C Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; ETIFR - Extended Timer/Counter Interrupt Flag register
                                 .equ	OCF1C	= 0	; Timer/Counter 1, Output Compare C Match Flag
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR321	= 0	; Prescaler Reset, T/C3, T/C2, T/C1
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode Bit 0
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode Bit 1
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Clock Select bit 0
                                 .equ	CS11	= 1	; Clock Select 1 bit 1
                                 .equ	CS12	= 2	; Clock Select1 bit 2
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare for channel C
                                 .equ	FOC1B	= 6	; Force Output Compare for channel B
                                 .equ	FOC1A	= 7	; Force Output Compare for channel A
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TCCR2 - Timer/Counter Control Register
                                 .equ	CS20	= 0	; Clock Select
                                 .equ	CS21	= 1	; Clock Select
                                 .equ	CS22	= 2	; Clock Select
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Match Output Mode
                                 .equ	COM21	= 5	; Compare Match Output Mode
                                 .equ	WGM20	= 6	; Wafeform Generation Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter Register
                                 .equ	TCNT2_0	= 0	; Timer/Counter Register Bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter Register Bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter Register Bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter Register Bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter Register Bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter Register Bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter Register Bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter Register Bit 7
                                 
                                 ; OCR2 - Output Compare Register
                                 .equ	OCR2_0	= 0	; Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Output Compare Register Bit 7
                                 
                                 ; TIMSK - 
                                 .equ	TOIE2	= 6	; 
                                 .equ	OCIE2	= 7	; 
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; ETIMSK - Extended Timer/Counter Interrupt Mask Register
                                 .equ	OCIE3C	= 1	; Timer/Counter3, Output Compare Match Interrupt Enable
                                 .equ	TOIE3	= 2	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3B	= 3	; Timer/Counter3 Output CompareB Match Interrupt Enable
                                 .equ	OCIE3A	= 4	; Timer/Counter3 Output CompareA Match Interrupt Enable
                                 .equ	TICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; ETIFR - Extended Timer/Counter Interrupt Flag register
                                 .equ	OCF3C	= 1	; Timer/Counter3 Output Compare C Match Flag
                                 .equ	TOV3	= 2	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3B	= 3	; Output Compare Flag 1B
                                 .equ	OCF3A	= 4	; Output Compare Flag 1A
                                 .equ	ICF3	= 5	; Input Capture Flag 1
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR321	= 0	; Prescaler Reset, T/C3, T/C2, T/C1
                                 ;.equ	PSR1	= PSR321	; For compatibility
                                 ;.equ	PSR2	= PSR321	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode Bit 0
                                 .equ	PWM30	= WGM30	; For compatibility
                                 .equ	WGM31	= 1	; Waveform Generation Mode Bit 1
                                 .equ	PWM31	= WGM31	; For compatibility
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Comparet Ouput Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 3A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Clock Select 3 bit 0
                                 .equ	CS31	= 1	; Clock Select 3 bit 1
                                 .equ	CS32	= 2	; Clock Select3 bit 2
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	CTC30	= WGM32	; For compatibility
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	CTC31	= WGM33	; For compatibility
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3  Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare for channel C
                                 .equ	FOC3B	= 6	; Force Output Compare for channel B
                                 .equ	FOC3A	= 7	; Force Output Compare for channel A
                                 
                                 ; TCNT3L - Timer/Counter3 Low Byte
                                 .equ	TCN3L0	= 0	; Timer/Counter 3 bit 0
                                 .equ	TCN3L1	= 1	; Timer/Counter 3 bit 1
                                 .equ	TCN3L2	= 2	; Timer/Counter 3 bit 2
                                 .equ	TCN3L3	= 3	; Timer/Counter 3 bit 3
                                 .equ	TCN3L4	= 4	; Timer/Counter 3 bit 4
                                 .equ	TCN3L5	= 5	; Timer/Counter 3 bit 5
                                 .equ	TCN3L6	= 6	; Timer/Counter 3 bit 6
                                 .equ	TCN3L7	= 7	; Timer/Counter 3 bit 7
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDTCSR	= WDTCR	; For compatibility
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDTOE	= WDCE	; For compatibility
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADFR	= 5	; ADC  Free Running Select
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	WDTON	= 0	; Watchdog timer always on
                                 .equ	M103C	= 1	; ATmega103 compatibility mode
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0xffff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 4096
                                 .equ	RAMEND	= 0x10ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 131072
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 4096
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0xf000
                                 .equ	NRWW_STOP_ADDR	= 0xffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0xefff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0xfe00
                                 .equ	SECONDBOOTSTART	= 0xfc00
                                 .equ	THIRDBOOTSTART	= 0xf800
                                 .equ	FOURTHBOOTSTART	= 0xf000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	OC2addr	= 0x0012	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0014	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0016	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0018	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x001a	; Timer/Counter Compare Match B
                                 .equ	OVF1addr	= 0x001c	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x001e	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0020	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0024	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0026	; USART0 Data Register Empty
                                 .equ	UTXC0addr	= 0x0028	; USART0, Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	OC1Caddr	= 0x0030	; Timer/Counter1 Compare Match C
                                 .equ	ICP3addr	= 0x0032	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0034	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0036	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0038	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x003a	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x003c	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x003e	; USART1, Data Register Empty
                                 .equ	UTXC1addr	= 0x0040	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x0042	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0044	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 70	; size in words
                                 
                                 #endif  /* _M128DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Lab8.asm
                                 ;
                                 ; Created: 2/25/2021 4:43:12 PM
                                 ; Author : felip
                                 ;
                                 
                                 .include "m128def.inc"			; Include definition file
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega128.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m128def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega128
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega128
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M128DEF_INC_
                                 #endif  /* _M128DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;***********************************************************
                                 ;*	Internal Register Definitions and Constants
                                 ;***********************************************************
                                 .def	mpr = r16				; Multipurpose register
                                 .def	moder = r8				; Program mode register 
                                 .def	curr_char = r17			; character that is being changed
                                 .def	WH = r19				; store the address of current printed characters
                                 .def	WL = r18
                                 .def	waitcnt = r20			; Wait Loop Counter
                                 .def	ilcnt = r21				; Inner Loop Counter
                                 .def	olcnt = r22				; Outer Loop Counter
                                 .def	letters_confirmed = r24 ; number of confirmed letters
                                 
                                 .equ	A_letter = 65			;Letter A ASCII
                                 .equ	Z_letter = 90			;Letter Z ASCII
                                 .equ	WTime = 15				; Time to wait in wait loop
                                 
                                 ;***********************************************************
                                 ;*	Start of Code Segment
                                 ;***********************************************************
                                 .cseg							; Beginning of code segment
                                 
                                 ;***********************************************************
                                 ;*	Interrupt Vectors
                                 ;***********************************************************
                                 .org	$0000					; Beginning of IVs
000000 c045                      		rjmp 	INIT			; Reset interrup
                                 .org	$0046					; End of Interrupt Vectors
                                 
                                 ;***********************************************************
                                 ;*	Program Initialization
                                 ;***********************************************************
                                 INIT:							; The initialization routine
                                     ; Initialize the Stack Pointer
000046 ef0f                      		ldi		mpr, low(RAMEND)
000047 bf0d                      		out		SPL, mpr		; Load SPL with low byte of RAMEND
000048 e100                      		ldi		mpr, high(RAMEND)
000049 bf0e                      		out		SPH, mpr		; Load SPH with high byte of RAMEND
                                 
                                     ; Initialize Port B for output
00004a ef0f                      		ldi		mpr, $FF		; Set Port B Data Direction Register
00004b bb07                      		out		DDRB, mpr		; for output
00004c e000                      		ldi		mpr, $00		; Initialize Port B Data Register
00004d bb08                      		out		PORTB, mpr		; so all Port B outputs are low		
                                 
                                 	; Initialize Port D for input
00004e e000                      		ldi		mpr, $00		; Set Port D Data Direction Register
00004f bb01                      		out		DDRD, mpr		; for input
000050 ef0f                      		ldi		mpr, $FF		; Initialize Port D Data Register
000051 bb02                      		out		PORTD, mpr		; so all Port D inputs are Tri-State
                                 
                                 
                                 	; Initialize timer
000052 e004                      		ldi mpr, (1<<CS12) ;256 prescalar
000053 bd0e                      		out TCCR1B, mpr
                                 
                                 
                                 	; Initialize the LCD Display
000054 d13c                      		rcall LCDInit ; Initialize LCD Display
000055 d011                      		rcall Print_Menu_1
                                 		
                                 		;clear mode and letters register
000056 2488                      		clr moder
000057 2788                      		clr letters_confirmed
                                 
                                 		;loading current character (A)
000058 e411                      		ldi curr_char, A_letter 
                                 
                                 		;sei	; NOTE: This must be the last thing to do in the INIT function
                                 
                                 ;***********************************************************
                                 ;*	Main Program
                                 ;***********************************************************
                                 MAIN:							; The Main program
000059 b300                      		IN		mpr, PIND		; Get input from Port D
                                 		
00005a 3f0e                      		CPI		mpr, 0b11111110       ; Check if S1 is pressed
00005b f409                      		BRNE S6					; Branch if not pressed to next CPI
00005c d046                      		RCALL PD0_press			; Call function to print names
                                 
00005d 3e0f                      		S6: CPI		mpr, 0b11101111	; Check if S2 is pressed
00005e f409                      		BRNE S7					; Branch if not pressed to next CPI
00005f d07e                      		RCALL PD4_press			; Call function to print names
                                 
000060 3b0f                      		S7: CPI		mpr, 0b10111111	; Check if S8 is pressed
000061 f409                      		BRNE S8					; Branch if not pressed to MAIN
000062 d0d9                      		RCALL PD6_press			; Call function to print names
                                 
000063 370f                      		S8: CPI		mpr, 0b01111111	; Check if S8 is pressed
000064 f7a1                      		BRNE MAIN				; Branch if not pressed to MAIN
000065 d0f2                      		RCALL PD7_press			; Call function to print names
                                 
                                 
000066 cff2                      		rjmp MAIN ; Infinite loop. End of program.
                                 
                                 
                                 ;***********************************************************
                                 ;*	Functions and Subroutines
                                 ;***********************************************************
                                 
                                 ;
                                 ;	Print_Menu_1
                                 ;	Prints initial (as soon as board gets turned on) menu
                                 ;
                                 Print_Menu_1:
                                 
000067 93af                      	push XL
000068 93bf                      	push XH
000069 93ef                      	push ZL
00006a 93ff                      	push ZH
00006b 930f                      	push mpr
                                 
00006c e0a0                      	ldi XL, $00						; Pointing X to $0100
00006d e0b1                      	ldi XH, $01						; Pointing X to $0100
00006e e5e6                      	LDI ZL, LOW(MENU_1_LN1_BEG<<1)		; Load String address (LOW) from Program Memory
00006f e0f5                      	LDI ZH, HIGH(MENU_1_LN1_BEG<<1)	; Load String address (HIGH) from Program Memory 
                                 
                                 	Loop3:							; Loop for entire string
000070 36e6                      		CPI ZL, LOW(MENU_1_LN1_END<<1) ; Check if Z(LOW) is pointing to LOW(MENU_1_LN1_END<<1)
000071 f019                      		BREQ END					; Branch id ZL is equal to ($10 << 1) to END
                                 			
000072 9105                      		LPM mpr, Z+					; Load character from Z address into mpr and post-increment Z
000073 930d                      		ST X+, mpr					; Store mpr into (X) and post-increment X
                                 
000074 cffb                      		RJMP Loop3					; Loop back to Loop
                                 	END:
                                 	;RCALL LCDWrLn1					; Print First Line to LCD
                                 
000075 e1a0                      	LDI XL, $10						; Pointing Y to $0110
000076 e0b1                      	LDI XH, $01						; Pointing Y to $0110
                                 
000077 e6e6                      	LDI ZL, LOW(MENU_1_LN2_BEG<<1)		; Load String address (LOW) from Program Memory
000078 e0f5                      	LDI ZH, HIGH(MENU_1_LN2_BEG<<1)	; Load String address (HIGH) from Program Memory 
                                 
                                 	Loop2:							; Loop for entire string
000079 37e6                      		CPI ZL, LOW(MENU_1_LN2_END<<1) ; Check if Z(LOW) is pointing to LOW(MENU_1_LN2_END<<1)
00007a f019                      		BREQ END2					; Branch id ZL is equal to ($10 << 1) to END
                                 			
00007b 9105                      		LPM mpr, Z+					; Load character from Z address into mpr and post-increment Z
00007c 930d                      		ST X+, mpr					; Store mpr into (X) and post-increment X
                                 
00007d cffb                      		RJMP Loop2					; Loop back to Loop
                                 	END2:
00007e d151                      	RCALL LCDWrite;
                                 
00007f 910f                      	pop mpr
000080 91ff                      	pop ZH
000081 91ef                      	pop ZL
000082 91bf                      	pop XH
000083 91af                      	pop XL
                                 
000084 9508                      	ret
                                 
                                 ;
                                 ;	Print_Menu_2_Ln
                                 ;	Prints the second menu (after PD0 is pressed once)
                                 ;	This function is only called once, as there is no need to update it every time.
                                 ;
                                 
                                 Print_Menu_2_Ln1:
                                 
000085 93af                      	push XL
000086 93bf                      	push XH
000087 93ef                      	push ZL
000088 93ff                      	push ZH
000089 930f                      	push mpr
                                 	
00008a d16b                      	rcall LCDClrLn1					;clear line 1
                                 
00008b e0a0                      	ldi XL, $00						; Pointing X to $0100
00008c e0b1                      	ldi XH, $01						; Pointing X to $0100
00008d e7e6                      	LDI ZL, LOW(MENU_2_LN1_BEG<<1)		; Load String address (LOW) from Program Memory
00008e e0f5                      	LDI ZH, HIGH(MENU_2_LN1_BEG<<1)	; Load String address (HIGH) from Program Memory 
                                 
                                 	Print_Menu_2_Loop:							; Loop for entire string
00008f 38e6                      		CPI ZL, LOW(MENU_2_LN1_END<<1) ; Check if Z(LOW) is pointing to LOW(MENU_1_LN1_END<<1)
000090 f019                      		BREQ Print_Menu_2_END					; Branch id ZL is equal to ($10 << 1) to END
                                 			
000091 9105                      		LPM mpr, Z+					; Load character from Z address into mpr and post-increment Z
000092 930d                      		ST X+, mpr					; Store mpr into (X) and post-increment X
                                 
000093 cffb                      		RJMP Print_Menu_2_Loop					; Loop back to Loop
                                 	Print_Menu_2_END:
000094 d13e                      	RCALL LCDWrLn1					; Print First Line to LCD
                                 
000095 d170                      	rcall LCDClrLn2	
                                 
000096 e1a0                      	ldi XL, $10						; Pointing X to $0110
000097 e0b1                      	ldi XH, $01						; Pointing X to $0110
                                 
000098 e401                      	ldi mpr, A_letter; load to-be-converted value into mpr
000099 930c                      	st X, mpr
                                 
00009a d148                      	RCALL LCDWrLn2
                                 
                                 	;W is a register pair that stores the current letter pointer for the 
                                 	;LCD. It allows us to update only that single letter without having to
                                 	;loop and calulate the index.
00009b 2f2a                      	mov WL, XL
00009c 2f3b                      	mov WH, XH
                                 
00009d 910f                      	pop mpr
00009e 91ff                      	pop ZH
00009f 91ef                      	pop ZL
0000a0 91bf                      	pop XH
0000a1 91af                      	pop XL
                                 
0000a2 9508                      	ret
                                 
                                 
                                 ;
                                 ;	PD0_press
                                 ;	This routine has 2 different behaviours. After the boar has just been turned on, the first
                                 ;	time that PD0 is pressed, it will enter confirmation mode. After confirmation mode is enabled
                                 ;	it will only confirm letters.
                                 ;
                                 PD0_press:
                                 	
0000a3 930f                      	push mpr
                                 
                                 	;check if the board is not in the initial mode and branch
0000a4 e000                      	ldi mpr, 0
0000a5 1680                      	cp moder, mpr
0000a6 f429                      	brne menu_2_branch_pd0 
                                 
                                 	;initial mode
0000a7 9483                      	inc moder
0000a8 dfdc                      	rcall Print_Menu_2_Ln1
0000a9 d0ca                      	rcall Wait2
                                 
0000aa 910f                      	pop mpr
0000ab 9508                      	ret
                                 
                                 	menu_2_branch_pd0: ;confirm mode
                                 
                                 	;increment WL so that next letter can be printed
0000ac 9523                      	inc WL
                                 
                                 	;load location to store and program memory of each letter
0000ad e8e6                      	ldi ZL, low(MORSE_ALPHABET_BEG<<1) 
0000ae e0f5                      	ldi ZH, high(MORSE_ALPHABET_BEG<<1)
0000af e0a0                      	ldi XL, low(Confirmed_Letters_BEG)
0000b0 e0b2                      	ldi XH, high(Confirmed_Letters_BEG)
                                 	
                                 	;here we know the index of the array that the letter is located
0000b1 e401                      	ldi mpr, A_letter
0000b2 2f71                      	mov r23, curr_char
0000b3 1b70                      	sub r23, mpr ;find the index of the letter in the array in PM
0000b4 2f97                      	mov r25, r23
                                 	;loop and increment Z by 2 so that they reflect that index
                                 	Loop_r23:
0000b5 3070                      		cpi r23, $00
0000b6 f019                      		breq end_loop_r23
0000b7 957a                      		dec r23
0000b8 9632                      		adiw Z, 2
0000b9 cffb                      		rjmp Loop_r23
                                 	end_loop_r23:
0000ba 2f78                      	mov r23, letters_confirmed
                                 	;loop and increment X by 1 so that they reflect that index
                                 	loop_letter_cnt:
0000bb 3070                      		cpi r23, $00
0000bc f019                      		breq end_loop_cnt
0000bd 957a                      		dec r23
0000be 9611                      		adiw X, 1
0000bf cffb                      		rjmp loop_letter_cnt
                                 	end_loop_cnt:
                                 
                                 	;put letter into array in memory location $0200 + index
0000c0 9104                      	lpm mpr, Z
0000c1 930c                      	st	X, mpr
                                 
                                 	;restore r23
0000c2 2f79                      	mov r23,r25
                                 
                                 	;loading number of symbols in letter from above
0000c3 ebea                      	ldi ZL, low(MORSE_ALPHABET_LEN_BEG<<1) 
0000c4 e0f5                      	ldi ZH, high(MORSE_ALPHABET_LEN_BEG<<1)
0000c5 e1a0                      	ldi XL, low(Confirmed_Letters_NUM_BEG)
0000c6 e0b2                      	ldi XH, high(Confirmed_Letters_NUM_BEG)
                                 	
                                 	;same as loops above, but for symbols 
                                 	;per letter instead of the letters themselves
                                 	Loop_r23_2:
0000c7 3070                      		cpi r23, $00
0000c8 f019                      		breq end_loop_r23_2
0000c9 957a                      		dec r23
                                 		;lpm mpr, Z+
0000ca 9632                      		adiw Z, 2
0000cb cffb                      		rjmp Loop_r23_2
                                 	end_loop_r23_2:
0000cc 2f78                      	mov r23, letters_confirmed
                                 	loop_letter_cnt_2:
0000cd 3070                      		cpi r23, $00
0000ce f019                      		breq end_loop_cnt_2
0000cf 957a                      		dec r23
0000d0 9611                      		adiw X, 1
0000d1 cffb                      		rjmp loop_letter_cnt_2
                                 	end_loop_cnt_2: 
                                 
                                 	;put number of symbols for letter into array in memory location $0210 + index
0000d2 9104                      	lpm mpr, Z
0000d3 930c                      	st	X, mpr
                                 
                                 	;"clear" (A) current character
0000d4 e411                      	ldi curr_char, A_letter
                                 	;update the LCD by adding a leading A
0000d5 d05a                      	rcall Update_LCD_at_Location
                                 	;increment the number of confirmed letters
0000d6 9583                      	inc letters_confirmed
                                 	;wait for bouncing
0000d7 d09c                      	rcall Wait2
                                 
                                 	;check if it is on the edge of the LCD
0000d8 2f08                      	mov mpr, letters_confirmed
0000d9 3100                      	cpi mpr, $10
                                 	;if it is, "press PD4", else, finish
0000da f409                      	brne end_pd0
0000db d002                      	rcall PD4_press
                                 
                                 
0000dc 910f                      	end_pd0: pop mpr
0000dd 9508                      	ret
                                 
                                 
                                 ;
                                 ;	PD4_press
                                 ;	Routine is executed when switch 5 is pressed.
                                 ;	It will print all confirmed characters and clear the arrays afterwards.
                                 ;
                                 PD4_press:
0000de 930f                      	push mpr
0000df 937f                      	push r23
                                 	
                                 	;check if the program is in confirm mode
0000e0 e000                      	ldi mpr, 0
0000e1 1680                      	cp moder, mpr
0000e2 f0b1                      	breq PD4_END
                                 	
                                 	;check if letters have been confirmed
0000e3 2f08                      	mov mpr, letters_confirmed
0000e4 3000                      	cpi mpr, $00
0000e5 f099                      	breq PD4_END
                                 
                                 	;print the letters
0000e6 d015                      	rcall Morse_Print_chars
                                 
                                 	;loop to clear memory from letters
                                 	;x will be for letters
0000e7 e0a0                      	ldi XL, low(Confirmed_Letters_BEG)
0000e8 e0b2                      	ldi XH, high(Confirmed_Letters_BEG)
                                 	;y will be for num in morse
0000e9 e1c0                      	ldi YL, low(Confirmed_Letters_NUM_BEG)
0000ea e0d2                      	ldi YH, high(Confirmed_Letters_NUM_BEG)
0000eb 2f78                      	mov r23, letters_confirmed
                                 	;clear arrays in memory
                                 	PD4_chars_loop_1_beg:
0000ec 3070                      		cpi r23, $00
0000ed f029                      		breq PD4_chars_loop_1_end
0000ee 2700                      		clr mpr
0000ef 930d                      		st X+, mpr ;the letter to display
0000f0 9309                      		st Y+, mpr ;the number of loops for letter
0000f1 957a                      		dec r23
0000f2 cff9                      		rjmp PD4_chars_loop_1_beg
                                 	PD4_chars_loop_1_end:
                                 	;set the amount fo confirmed letters to 0 
0000f3 2788                      	clr letters_confirmed
                                 	;update current letter for A
0000f4 e411                      	ldi curr_char, A_letter
                                 	;update LCD memory location for current letter
0000f5 e120                      	ldi WL, $10	
0000f6 e031                      	ldi WH, $01
                                 	;clear line 2 of lcd
0000f7 d10e                      	rcall LCDClrLn2
                                 	;update line 2 of lcd
0000f8 d037                      	rcall Update_LCD_at_Location
                                 	
                                 	PD4_END:
0000f9 917f                      	pop r23
0000fa 910f                      	pop mpr
0000fb 9508                      	ret
                                 
                                 
                                 ;
                                 ;	Morse_Print_chars
                                 ;	Loops through the arrays in memory and prints each character
                                 ;
                                 Morse_Print_chars:
0000fc 930f                      	push mpr
0000fd 937f                      	push r23
0000fe 939f                      	push r25
                                 
0000ff 2799                      	clr r25
000100 2777                      	clr r23
                                 
                                 	;confirmed chars are stored at 0200
                                 	;amount of morse is stored at 0210
                                 	;number of confirmed letter is stored at register letters_confirmed
                                 	;x will be for letters
000101 e0a0                      	ldi XL, low(Confirmed_Letters_BEG)
000102 e0b2                      	ldi XH, high(Confirmed_Letters_BEG)
                                 	;y will be for num in morse
000103 e1c0                      	ldi YL, low(Confirmed_Letters_NUM_BEG)
000104 e0d2                      	ldi YH, high(Confirmed_Letters_NUM_BEG)
                                 
                                 	;loop for the amount fo confirmed letters
000105 2f78                      	mov r23, letters_confirmed
                                 	Morse_Print_chars_loop_1_beg:
000106 3070                      		cpi r23, $00
000107 f081                      		breq Morse_Print_chars_loop_1_end
                                 
000108 910d                      		ld mpr, X+ ;the letter to display
000109 9199                      		ld r25, Y+ ;the number of loops for letter
                                 		;loop for the amount of symbols in letter
                                 		Letter_loop1_beg:
00010a 3090                      			cpi r25, $00
00010b f041                      			breq Letter_loop1_end
00010c 0f00                      			lsl mpr
                                 			;if carry is set, output dash, else output dot
00010d f010                      			brcs Letter_loop1_dash
00010e d00f                      			rcall DOT
00010f c001                      			rjmp Letter_loop1_nxt
                                 			Letter_loop1_dash:
000110 d015                      			rcall DASH
                                 			Letter_loop1_nxt:
                                 			;call wait between same letter (1s)
000111 d072                      			rcall Wait_clk
000112 959a                      			dec r25
000113 cff6                      			rjmp Letter_loop1_beg
                                 		Letter_loop1_end:
                                 		;wait between other letters (1s (from above) + 2s (below))
                                 
000114 d06f                      		rcall Wait_clk 
000115 d06e                      		rcall Wait_clk 
000116 957a                      		dec r23
000117 cfee                      		rjmp Morse_Print_chars_loop_1_beg
                                 	Morse_Print_chars_loop_1_end:
                                 
                                 	;turn off all LEDs
000118 e000                      	ldi mpr, 0b00000000
000119 bb08                      	out PORTB, mpr
                                 
00011a 919f                      	pop r25
00011b 917f                      	pop r23
00011c 910f                      	pop mpr
00011d 9508                      	ret
                                 
                                 ;
                                 ;	DOT
                                 ;	Blinks a DOT
                                 ;
                                 DOT:
00011e 930f                      	push mpr
                                 
                                 	;enable dot
00011f ef00                      	ldi mpr, 0b11110000
000120 bb08                      	out PORTB, mpr
000121 d062                      	rcall Wait_clk
000122 e100                      	ldi mpr, 0b00010000
000123 bb08                      	out PORTB, mpr
                                 
000124 910f                      	pop mpr
000125 9508                      	ret
                                 
                                 ;
                                 ;	DASH
                                 ;	Blinks a Dash
                                 ;
                                 DASH:
000126 930f                      	push mpr
                                 
                                 	;enable dot
000127 ef00                      	ldi mpr, 0b11110000
000128 bb08                      	out PORTB, mpr
000129 d05a                      	rcall Wait_clk
00012a d059                      	rcall Wait_clk
00012b d058                      	rcall Wait_clk
00012c e100                      	ldi mpr, 0b00010000
00012d bb08                      	out PORTB, mpr
                                 
00012e 910f                      	pop mpr
                                 
00012f 9508                      	ret
                                 
                                 ;
                                 ; Update_LCD_at_Location
                                 ; Updates the second line of the LCD to display the letter to be selected
                                 ;
                                 Update_LCD_at_Location:
000130 930f                      	push mpr
000131 93bf                      	push XH
000132 93af                      	push XL
                                 
000133 2fb3                      	mov XH, WH
000134 2fa2                      	mov XL, WL
                                 	
000135 2f01                      	mov mpr, curr_char; load to-be-converted value into mpr
000136 930c                      	st X, mpr
000137 d0ab                      	RCALL LCDWrLn2
                                 
000138 91af                      	pop XL
000139 91bf                      	pop XH
00013a 910f                      	pop mpr
00013b 9508                      	ret
                                 
                                 
                                 ;
                                 ; PD6_press
                                 ; increases the value in curr_char and checks for overflow to wrap around
                                 ;
                                 PD6_press:
00013c 93af                      	push XL
00013d 93bf                      	push XH
00013e 93ef                      	push ZL
00013f 93ff                      	push ZH
000140 930f                      	push mpr
                                 
                                 	;check for confirm mode
000141 e000                      	ldi mpr, 0
000142 1680                      	cp moder, mpr
000143 f029                      	breq PD6_END
                                 
                                 	;checks if the current character is a Z, and if it is, branch to rotate
000144 351a                      	cpi curr_char, Z_letter
000145 f049                      	breq PD6_rotate
                                 
                                 	;increment character and update LCD
000146 9513                      	inc curr_char
000147 dfe8                      	rcall Update_LCD_at_Location
                                 	;wait for bounce
000148 d02b                      	rcall Wait2
                                 
                                 	PD6_END:
000149 910f                      	pop mpr
00014a 91ff                      	pop ZH
00014b 91ef                      	pop ZL
00014c 91bf                      	pop XH
00014d 91af                      	pop XL
00014e 9508                      	ret
                                 
                                 	
                                 	PD6_rotate:
                                 	;change current character to A and update LCD
00014f e411                      	ldi curr_char, A_letter
000150 dfdf                      	rcall Update_LCD_at_Location
                                 	;wait for bounce
000151 d022                      	rcall Wait2
                                 
000152 910f                      	pop mpr
000153 91ff                      	pop ZH
000154 91ef                      	pop ZL
000155 91bf                      	pop XH
000156 91af                      	pop XL
                                 
000157 9508                      	ret
                                 
                                 ;
                                 ; PD7_press
                                 ; decreases the value in curr_char and checks if it is 0 to wrap around
                                 ;
                                 PD7_press:
                                 	
000158 93af                      	push XL
000159 93bf                      	push XH
00015a 93ef                      	push ZL
00015b 93ff                      	push ZH
00015c 930f                      	push mpr
                                 
                                 	;check for program mode
00015d e000                      	ldi mpr, 0
00015e 1680                      	cp moder, mpr
00015f f029                      	breq PD7_END
                                 
                                 	;check if the letter is an A, and if it is, rotate to Z
000160 3411                      	cpi curr_char, A_letter
000161 f049                      	breq PD7_rotate
                                 
                                 	;decrement current letter and update LCD
000162 951a                      	dec curr_char
000163 dfcc                      	rcall Update_LCD_at_Location
                                 	;wait for bounce
000164 d00f                      	rcall Wait2
                                 
                                 	PD7_END:
000165 910f                      	pop mpr
000166 91ff                      	pop ZH
000167 91ef                      	pop ZL
000168 91bf                      	pop XH
000169 91af                      	pop XL
00016a 9508                      	ret
                                 
                                 	PD7_rotate:
                                 
                                 	;set letter to Z and update LCD
00016b e51a                      	ldi curr_char, Z_letter
00016c dfc3                      	rcall Update_LCD_at_Location
                                 	;wait for bounce
00016d d006                      	rcall Wait2
                                 
00016e 910f                      	pop mpr
00016f 91ff                      	pop ZH
000170 91ef                      	pop ZL
000171 91bf                      	pop XH
000172 91af                      	pop XL
                                 
000173 9508                      	ret
                                 
                                 ;----------------------------------------------------------------
                                 ; Sub:	Wait
                                 ; Desc:	A wait loop that is 16 + 159975*waitcnt cycles or roughly 
                                 ;		waitcnt*10ms.  Just initialize wait for the specific amount 
                                 ;		of time in 10ms intervals. Here is the general eqaution
                                 ;		for the number of clock cycles in the wait loop:
                                 ;			((3 * ilcnt + 3) * olcnt + 3) * waitcnt + 13 + call
                                 ;----------------------------------------------------------------
                                 Wait2:
000174 934f                      		push	waitcnt			; Save wait register
000175 935f                      		push	ilcnt			; Save ilcnt register
000176 936f                      		push	olcnt			; Save olcnt register
                                 
000177 e04f                      		ldi waitcnt, WTime		; Load time to delay 
                                 
000178 ee60                      Loop:	ldi		olcnt, 224		; load olcnt register
000179 ee5d                      OLoop:	ldi		ilcnt, 237		; load ilcnt register
00017a 955a                      ILoop:	dec		ilcnt			; decrement ilcnt
00017b f7f1                      		brne	ILoop			; Continue Inner Loop
00017c 956a                      		dec		olcnt		; decrement olcnt
00017d f7d9                      		brne	OLoop			; Continue Outer Loop
00017e 954a                      		dec		waitcnt		; Decrement wait 
00017f f7c1                      		brne	Loop			; Continue Wait loop	
                                 
000180 916f                      		pop		olcnt		; Restore olcnt register
000181 915f                      		pop		ilcnt		; Restore ilcnt register
000182 914f                      		pop		waitcnt		; Restore wait register
000183 9508                      		ret				; Return from subroutine
                                 
                                 ;
                                 ;	Wait_clk
                                 ;	Uses CLK1 to generate a 1s delay
                                 ;
                                 Wait_clk:
000184 930f                      	push mpr
                                 
                                 	;set timer count to 0
000185 2700                      	clr mpr
000186 bd0d                      	out TCNT1H, mpr
000187 bd0c                      	out TCNT1L, mpr
                                 	;reset overflow flag
000188 e004                      	ldi mpr, 0b00000100
000189 bf06                      	out TIFR, mpr
                                 
                                 	;loop while the flag is not set
                                 	wait_loop:
00018a b706                      	in mpr, TIFR
                                 	;check for set flag
00018b 7004                      	andi mpr, 0b00000100
00018c f3e9                      	breq wait_loop
                                 
                                 	;reset the overflow flag
00018d e004                      	ldi mpr, 0b00000100
00018e bf06                      	out TIFR, mpr
                                 
00018f 910f                      	pop mpr
000190 9508                      	ret
                                 
                                 
                                 ;***********************************************************
                                 ;*	Additional Program Includes
                                 ;***********************************************************
                                 .include "LCDDriver.asm"
                                 
                                 ;*
                                 ;*	LCDDriver.asm	-	V2.0
                                 ;*
                                 ;*	Contains the neccessary functions to display text to a
                                 ;*	2 x 16 character LCD Display.  Additional functions
                                 ;*	include a conversion routine from an unsigned 8-bit
                                 ;*	binary number to and ASCII text string.
                                 ;*
                                 ;*	Version 2.0 - Added support for accessing the LCD 
                                 ;*		Display via the serial port. See version 1.0 for 
                                 ;*		accessing a memory mapped LCD display.
                                 ;*
                                 ;***********************************************************
                                 ;*
                                 ;*	 Author: David Zier
                                 ;*	   Date: March 17, 2003
                                 ;*	Company: TekBots(TM), Oregon State University - EECS
                                 ;*	Version: 2.0
                                 ;*
                                 ;***********************************************************
                                 ;*	Rev	Date	Name		Description
                                 ;*----------------------------------------------------------
                                 ;*	-	8/20/02	Zier		Initial Creation of Version 1.0
                                 ;*	A	3/7/03	Zier		V2.0 - Updated for USART LCD
                                 ;*
                                 ;*
                                 ;***********************************************************
                                 
                                 ;***********************************************************
                                 ;*	Internal Register Definitions and Constants
                                 ;*		NOTE: A register MUST be named 'mpr' in the Main Code
                                 ;*			It is recomended to use register r16.
                                 ;*		WARNING: Register r17-r22 are reserved and cannot be
                                 ;*			renamed outside of the LCD Driver functions. Doing
                                 ;*			so will damage the functionality of the LCD Driver
                                 ;***********************************************************
                                 .def	wait = r17				; Wait Loop Register
                                 .def	count = r18				; Character Counter
                                 .def	line = r19				; Line Select Register
                                 .def	type = r20				; LCD data type: Command or Text
                                 .def	q = r21					; Quotient for div10
                                 .def	r = r22					; Remander for div10
                                 
                                 .equ	LCDLine1 = $80			; LCD Line 1 select command
                                 .equ	LCDLine2 = $c0			; LCD Line 2 select command
                                 .equ	LCDClear = $01			; LCD Clear Command
                                 .equ	LCDHome = $02			; LCD Set Cursor Home Command
                                 .equ	LCDPulse = $08			; LCD Pulse signal, used to simulate 
                                 								; write signal
                                 
                                 .equ	LCDCmd = $00			; Constant used to write a command 
                                 .equ	LCDTxt = $01			; Constant used to write a text character
                                 
                                 .equ	LCDMaxCnt = 16			; Maximum number of characters per line
                                 .equ	LCDLn1Addr = $0100		; Beginning address for Line 1 data
                                 .equ	LCDLn2Addr = $0110		; Beginning address for Line 2 data
                                 
                                 ;-----------------------------------------------------------
                                 ;***********************************************************
                                 ;*	Public LCD Driver Suboutines and Functions
                                 ;*		These functions and subroutines can be called safely 
                                 ;*		from within any program
                                 ;***********************************************************
                                 ;-----------------------------------------------------------
                                 
                                 
                                 ;*******************************************************
                                 ;* SubRt: 	LCDInit
                                 ;* Desc: 	Initialize the Serial Port and the Hitachi 
                                 ;*			Display 8 Bit inc DD-RAM 
                                 ;*			Pointer with no features
                                 ;*			- 2 LInes with 16 characters
                                 ;*******************************************************
                                 LCDInit:
000191 930f                      		push	mpr				; Save the state of machine
000192 b70f                      		in		mpr, SREG		; Save the SREG
000193 930f                      		push	mpr				;
000194 931f                      		push	wait			; Save wait
                                 
                                 		; Setup the Communication Ports
                                 		; Port B: Output
                                 		; Port D: Input w/ internal pullup resistors
                                 		; Port F: Output on Pin 3
000195 e000                      		ldi		mpr, $00		; Initialize Port B for outputs
000196 bb08                      		out		PORTB, mpr		; Port B outputs high
000197 ef0f                      		ldi		mpr, $ff		; except for any overrides
000198 bb07                      		out		DDRB, mpr		;
000199 e000                      		ldi		mpr, $00		; Initialize Port D for inputs
00019a bb02                      		out		PORTD, mpr		; with Tri-State
00019b e000                      		ldi		mpr, $00		; except for any overrides
00019c bb01                      		out		DDRD, mpr		;
00019d e000                      		ldi		mpr, $00		; Initialize Port F Pin 3 to
00019e 9300 0062                 		sts		PORTF, mpr		; output inorder to twiddle the
0001a0 e008                      		ldi		mpr, (1<<DDF3)	; LCD interface
0001a1 9300 0061                 		sts		DDRF, mpr		; Must NOT override this port
                                 
                                 		; Setup the Serial Functionality
                                 		; SPI Type: Master
                                 		; SPI Clock Rate: 2*1000.000 kHz
                                 		; SPI Clock Phase: Cycle Half
                                 		; SPI Clock Polarity: Low
                                 		; SPI Data Order: MSB First
0001a3 e500                      		ldi		mpr, (1<<SPE|1<<MSTR)
0001a4 b90d                      		out		SPCR, mpr		; Set Serial Port Control Register
0001a5 e001                      		ldi		mpr, (1<<SPI2X)
0001a6 b90e                      		out		SPSR, mpr		; Set Serial Port Status Register
                                 
                                 		; Setup External SRAM configuration
                                 		; $0460 - $7FFF / $8000 - $FFFF
                                 		; Lower page wait state(s): None
                                 		; Uppoer page wait state(s): 2r/w
0001a7 e800                      		ldi		mpr, (1<<SRE)	; 
0001a8 bf05                      		out		MCUCR, mpr		; Initialize MCUCR
0001a9 e402                      		ldi		mpr, (1<<SRL2|1<<SRW11)
0001aa 9300 006d                 		sts		XMCRA, mpr		; Initialize XMCRA
0001ac e800                      		ldi		mpr, (1<<XMBK)	;
0001ad 9300 006c                 		sts		XMCRB, mpr		; Initialize XMCRB
                                 		
                                 		; Initialize USART0
                                 		; Communication Parameter: 8 bit, 1 stop, No Parity
                                 		; USART0 Rx: On
                                 		; USART0 Tx: On
                                 		; USART0 Mode: Asynchronous
                                 		; USART0 Baudrate: 9600
0001af e000                      		ldi		mpr, $00		;
0001b0 b90b                      		out		UCSR0A, mpr		; Init UCSR0A
0001b1 e108                      		ldi		mpr, (1<<RXEN0|1<<TXEN0)
0001b2 b90a                      		out		UCSR0B, mpr		; Init UCSR0B
0001b3 e006                      		ldi		mpr, (1<<UCSZ01|1<<UCSZ00)
0001b4 9300 0095                 		sts		UCSR0C, mpr		; Init UCSR0C
0001b6 e000                      		ldi		mpr, $00		;
0001b7 9300 0090                 		sts		UBRR0H, mpr		; Init UBRR0H
0001b9 e607                      		ldi		mpr, $67		;
0001ba b909                      		out		UBRR0L, mpr		; Init UBRR0L
                                 
                                 		; Initialize the LCD Display
0001bb e006                      		ldi		mpr, 6			;
                                 LCDINIT_L1:
0001bc ef1a                      		ldi		wait, 250		; 15ms of Display
0001bd d0bf                      		rcall	LCDWait			; Bootup wait
0001be 950a                      		dec		mpr				;
0001bf f7e1                      		brne	LCDINIT_L1		;
                                 
0001c0 e308                      		ldi		mpr, $38		; Display Mode set
0001c1 d097                      		rcall 	LCDWriteCmd		; 
0001c2 e008                      		ldi		mpr, $08		; Display Off
0001c3 d095                      		rcall	LCDWriteCmd		;
0001c4 e001                      		ldi		mpr, $01		; Display Clear
0001c5 d093                      		rcall	LCDWriteCmd		;
0001c6 e006                      		ldi		mpr, $06		; Entry mode set
0001c7 d091                      		rcall	LCDWriteCmd		;
0001c8 e00c                      		ldi		mpr, $0c		; Display on
0001c9 d08f                      		rcall	LCDWriteCmd		;
0001ca d028                      		rcall	LCDClr			; Clear display
                                 
0001cb 911f                      		pop		wait			; Restore wait
0001cc 910f                      		pop		mpr				; Restore SREG
0001cd bf0f                      		out		SREG, mpr		;
0001ce 910f                      		pop		mpr				; Restore mpr
0001cf 9508                      		ret						; Return from subroutine
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWrite
                                 ;* Desc:	Generic Write Function that writes both lines
                                 ;*			of text out to the LCD
                                 ;*			- Line 1 data is in address space $0100-$010F
                                 ;*			- Line 2 data is in address space $0110-$010F
                                 ;*******************************************************
                                 LCDWrite:
0001d0 d002                      		rcall LCDWrLn1			; Write Line 1
0001d1 d011                      		rcall LCDWrLn2			; Write Line 2
0001d2 9508                      		ret 					; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWrLn1
                                 ;* Desc:	This function will write the first line of 
                                 ;*			data to the first line of the LCD Display
                                 ;*******************************************************
                                 LCDWrLn1:
0001d3 930f                      		push 	mpr				; Save mpr
0001d4 93ef                      		push	ZL				; Save Z pointer
0001d5 93ff                      		push	ZH				;
0001d6 932f                      		push	count			; Save the count register
0001d7 933f                      		push	line			; Save the line register
                                 								
0001d8 e0e0                      		ldi		ZL, low(LCDLn1Addr)
0001d9 e0f1                      		ldi		ZH, high(LCDLn1Addr)		 
0001da e830                      		ldi		line, LCDLine1	; Set LCD line to Line 1
0001db d06b                      		rcall	LCDSetLine		; Restart at the beginning of line 1
0001dc d076                      		rcall	LCDWriteLine	; Write the line of text
                                 
0001dd 913f                      		pop		line
0001de 912f                      		pop		count			; Restore the counter
0001df 91ff                      		pop		ZH				; Restore Z pointer
0001e0 91ef                      		pop		ZL				;
0001e1 910f                      		pop 	mpr				; Restore mpr
0001e2 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWrLn2
                                 ;* Desc:	This function will write the second line of 
                                 ;*			data to the second line of the LCD Display
                                 ;*******************************************************
0001e3 930f                      LCDWrLn2:		push 	mpr				; Save mpr
0001e4 93ef                      		push	ZL				; Save Z pointer
0001e5 93ff                      		push	ZH				;
0001e6 932f                      		push	count			; Save the count register
0001e7 933f                      		push	line			; Save the line register
                                 								
0001e8 e1e0                      		ldi		ZL, low(LCDLn2Addr)
0001e9 e0f1                      		ldi		ZH, high(LCDLn2Addr)		 
0001ea ec30                      		ldi		line, LCDLine2	; Set LCD line to Line 2
0001eb d05b                      		rcall	LCDSetLine		; Restart at the beginning of line 2
0001ec d066                      		rcall	LCDWriteLine	; Write the line of text
                                 
0001ed 913f                      		pop		line
0001ee 912f                      		pop		count			; Restore the counter
0001ef 91ff                      		pop		ZH				; Restore Z pointer
0001f0 91ef                      		pop		ZL				;
0001f1 910f                      		pop 	mpr				; Restore mpr
0001f2 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDClr
                                 ;* Desc:	Generic Clear Subroutine that clears both 
                                 ;*			lines of the LCD and Data Memory storage area
                                 ;*******************************************************
                                 LCDClr:
0001f3 d002                      		rcall	LCDClrLn1		; Clear Line 1
0001f4 d011                      		rcall	LCDClrLn2		; Clear Line 2
0001f5 9508                      		ret						; Return from Subroutine
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDClrLn1
                                 ;* Desc:	This subroutine will clear the first line of 
                                 ;*			the data and the first line of the LCD Display
                                 ;*******************************************************
                                 LCDClrLn1:
0001f6 930f                      		push	mpr				; Save mpr
0001f7 933f                      		push	line			; Save line register
0001f8 932f                      		push	count			; Save the count register
0001f9 93ef                      		push	ZL				; Save Z pointer
0001fa 93ff                      		push	ZH				;
                                 	
0001fb e830                      		ldi		line, LCDline1	; Set Access to Line 1 of LCD
0001fc d04a                      		rcall	LCDSetLine		; Set Z pointer to address of line 1 data
0001fd e0e0                      		ldi		ZL, low(LCDLn1Addr)
0001fe e0f1                      		ldi		ZH, high(LCDLn1Addr)
0001ff d04c                      		rcall	LCDClrLine		; Call the Clear Line function
                                 
000200 91ff                      		pop		ZH				; Restore Z pointer
000201 91ef                      		pop		ZL				;
000202 912f                      		pop		count			; Restore the count register
000203 913f                      		pop		line			; Restore line register
000204 910f                      		pop		mpr				; Restore mpr
000205 9508                      		ret						; Return from Subroutine
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDClrLn2
                                 ;* Desc:	This subroutine will clear the second line of 
                                 ;*			the data and the second line of the LCD Display
                                 ;*******************************************************
                                 LCDClrLn2:
000206 930f                      		push	mpr				; Save mpr
000207 933f                      		push	line			; Save line register
000208 932f                      		push	count			; Save the count register
000209 93ef                      		push	ZL				; Save Z pointer
00020a 93ff                      		push	ZH				;
                                 	
00020b ec30                      		ldi		line, LCDline2	; Set Access to Line 2 of LCD
00020c d03a                      		rcall	LCDSetLine		; Set Z pointer to address of line 2 data
00020d e1e0                      		ldi		ZL, low(LCDLn2Addr)
00020e e0f1                      		ldi		ZH, high(LCDLn2Addr)
00020f d03c                      		rcall	LCDClrLine		; Call the Clear Line function
                                 
000210 91ff                      		pop		ZH				; Restore Z pointer
000211 91ef                      		pop		ZL				;
000212 912f                      		pop		count			; Restore the count register
000213 913f                      		pop		line			; Restore line register
000214 910f                      		pop		mpr				; Restore mpr
000215 9508                      		ret						; Return from Subroutine
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWriteByte
                                 ;* Desc:	This is a complex and low level function that
                                 ;*			allows any program to write any ASCII character
                                 ;*			(Byte) anywhere in the LCD Display.  There
                                 ;*			are several things that need to be initialized
                                 ;*			before this function is called:
                                 ;*		count - Holds the index value of the line to where
                                 ;*				the char is written, 0-15(39).  i.e. if 
                                 ;*				count has the value of 3, then the char is
                                 ;*				going to be written to the third element of
                                 ;*				the line.
                                 ;*		line  - Holds the line number that the char is going
                                 ;*				to be written to, (1 or 2).
                                 ;*		mpr	  - Contains the value of the ASCII character to 
                                 ;*				be written (0-255)
                                 ;*********************************************************
                                 LCDWriteByte:
000216 930f                      		push	mpr				; Save the mpr
000217 933f                      		push	line			; Save the line
000218 932f                      		push	count			; Save the count
                                 								; Preform sanity checks on count and line
000219 3228                      		cpi		count, 40		; Make sure count is within range
00021a f450                      		brsh	LCDWriteByte_3	; Do nothing and exit function
00021b 3031                      		cpi		line, 1			; If (line == 1)
00021c f411                      		brne	LCDWriteByte_1	; 
00021d e830                      		ldi		line, LCDLine1	; Load line 1 base LCD Address
00021e c003                      		rjmp	LCDWriteByte_2	; Continue on with function
                                 LCDWriteByte_1:					
00021f 3032                      		cpi		line, 2			; If (line == 2)
000220 f421                      		brne	LCDWriteByte_3	; Do nothing and exit function
000221 ec30                      		ldi		line, LCDLine2	; Load line 2 base LCD Address
                                 
                                 LCDWriteByte_2:					; Write char to LCD
000222 0f32                      		add		line, count		; Set the correct LCD address
000223 d023                      		rcall	LCDSetLine		; Set the line address to LCD
000224 d042                      		rcall	LCDWriteChar	; Write Char to LCD Display		
                                 		
                                 LCDWriteByte_3:					; Exit Function
000225 912f                      		pop		count			; Restore the count
000226 913f                      		pop		line			; Restore the line
000227 910f                      		pop		mpr				; Restore the mpr
000228 9508                      		ret						; Return from function
                                 		 
                                 ;*******************************************************
                                 ;* Func:	Bin2ASCII
                                 ;* Desc:	Converts a binary number into an ASCII 
                                 ;*			text string equivalent. 
                                 ;*			- The binary number needs to be in the mpr
                                 ;*			- The Start Address of where the text will
                                 ;*			 	be placed needs to be in the X Register
                                 ;*			- The count of the characters created are 
                                 ;*				added to the count register
                                 ;*******************************************************
                                 Bin2ASCII:
000229 930f                      		push	mpr				; save mpr
00022a 936f                      		push	r				; save r
00022b 935f                      		push	q				; save q
00022c 93bf                      		push	XH				; save X-pointer
00022d 93af                      		push	XL				;
                                 
                                 		; Determine the range of mpr
00022e 3604                      		cpi		mpr, 100		; is mpr >= 100
00022f f018                      		brlo	B2A_1			; goto next check
000230 e023                      		ldi		count, 3		; Three chars are written
000231 9613                      		adiw	XL, 3			; Increment X 3 address spaces
000232 c007                      		rjmp	B2A_3			; Continue with program
000233 300a                      B2A_1:	cpi		mpr, 10			; is mpr >= 10
000234 f018                      		brlo	B2A_2			; Continue with program
000235 e022                      		ldi		count, 2		; Two chars are written
000236 9612                      		adiw	XL, 2			; Increment X 2 address spaces
000237 c002                      		rjmp	B2A_3			; Continue with program
000238 9611                      B2A_2:	adiw	XL, 1			; Increment X 1 address space
000239 e021                      		ldi		count, 1 		; One char is written
                                 
                                 B2A_3:	;Do-While statement that converts Binary to ASCII
00023a d04a                      		rcall	div10			; Call the div10 function
00023b e300                      		ldi		mpr, '0'		; Set the base ASCII integer value
00023c 0f06                      		add		mpr, r			; Create the ASCII integer value
00023d 930e                      		st		-X, mpr			; Load ASCII value to memory
00023e 2f05                      		mov		mpr, q			; Set mpr to quotiant value
00023f 3000                      		cpi		mpr, 0			; does mpr == 0
000240 f7c9                      		brne	B2A_3			; do while (mpr != 0)
                                 
000241 91af                      		pop		XL				; restore X-pointer
000242 91bf                      		pop		XH				;
000243 915f                      		pop 	q				; restore q
000244 916f                      		pop		r				; restore r
000245 910f                      		pop		mpr				; restore mpr
000246 9508                      		ret						; return from function
                                 
                                 ;-------------------------------------------------------
                                 ;*******************************************************
                                 ;* Private LCD Driver Functions and Subroutines
                                 ;*	NOTE: It is not recommended to call these functions
                                 ;*	      or subroutines, only call the Public ones.
                                 ;*******************************************************
                                 ;-------------------------------------------------------
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDSetLine
                                 ;* Desc:	Change line to be written to 
                                 ;*******************************************************
                                 LCDSetLine:
000247 930f                      		push	mpr				; Save mpr
000248 2f03                      		mov		mpr,line		; Copy Command Data to mpr
000249 d00f                      		rcall	LCDWriteCmd		; Write the Command
00024a 910f                      		pop		mpr				; Restore the mpr
00024b 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDClrLine
                                 ;* Desc:	Manually clears a single line within an LCD
                                 ;*			Display and Data Memory by writing 16 
                                 ;*			consecutive ASCII spaces $20 to both the LCD 
                                 ;*			and the memory.  The line to be cleared must
                                 ;*			first be set in the LCD and the Z pointer is
                                 ;*			pointing the first element in Data Memory
                                 ;*******************************************************
                                 LCDClrLine:
00024c e200                      		ldi		mpr, ' '		; The space char to be written
00024d e120                      		ldi		count, LCDMaxCnt; The character count
                                 LCDClrLine_1:
00024e 9301                      		st		Z+, mpr			; Clear data memory element
00024f d017                      		rcall	LCDWriteChar	; Clear LCD memory element
000250 952a                      		dec		count			; Decrement the count
000251 f7e1                      		brne	LCDClrLine_1	; Continue untill all elements are cleared
000252 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWriteLine
                                 ;* Desc:	Writes a line of text to the LCD Display.
                                 ;*			This routine takes a data element pointed to
                                 ;*			by the Z-pointer and copies it to the LCD 
                                 ;*			Display for the duration of the line.  The
                                 ;*			line the Z-pointer must be set prior to the 
                                 ;*			function call.
                                 ;*******************************************************
                                 LCDWriteLine:
000253 e120                      		ldi		count, LCDMaxCnt; The character count
                                 LCDWriteLine_1:
000254 9101                      		ld		mpr, Z+			; Get the data element
000255 d011                      		rcall	LCDWriteChar	; Write element to LCD Display
000256 952a                      		dec		count			; Decrement the count
000257 f7e1                      		brne	LCDWriteLine_1	; Continue untill all elements are written
000258 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWriteCmd
                                 ;* Desc:	Write command that is in the mpr to LCD 
                                 ;*******************************************************
                                 LCDWriteCmd:
000259 934f                      		push	type			; Save type register
00025a 931f                      		push	wait			; Save wait register
00025b e040                      		ldi		type, LCDCmd	; Set type to Command data
00025c d013                      		rcall	LCDWriteData	; Write data to LCD
00025d 930f                      		push	mpr				; Save mpr register
00025e e002                      		ldi		mpr, 2			; Wait approx. 4.1 ms
                                 LCDWC_L1:
00025f ec1d                      		ldi		wait, 205		; Wait 2050 us
000260 d01c                      		rcall	LCDWait			;
000261 950a                      		dec		mpr				; The wait loop cont.
000262 f7e1                      		brne	LCDWC_L1		;
000263 910f                      		pop		mpr				; Restore mpr
000264 911f                      		pop		wait			; Restore wait register
000265 914f                      		pop		type			; Restore type register
000266 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWriteChar
                                 ;* Desc:	Write character data that is in the mpr
                                 ;*******************************************************
                                 LCDWriteChar:
000267 934f                      		push	type			; Save type register
000268 931f                      		push	wait			; Save the wait register
000269 e041                      		ldi		type, LCDTxt	; Set type to Text data
00026a d005                      		rcall	LCDWriteData	; Write data to LCD
00026b e110                      		ldi		wait, 16		; Delay 160 us
00026c d010                      		rcall	LCDWait			;
00026d 911f                      		pop		wait			; Restore wait register
00026e 914f                      		pop		type			; Restore type register
00026f 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWriteData
                                 ;* Desc:	Write data or command to LCD 
                                 ;*******************************************************
                                 LCDWriteData:
000270 b94f                      		out		SPDR, type		; Send type to SP
000271 e012                      		ldi		wait, 2			; Wait 2 us
000272 d00a                      		rcall	LCDWait			; Call Wait function
000273 b90f                      		out		SPDR,mpr		; Send data to serial port
000274 e012                      		ldi		wait, 2			; Wait 2 us
000275 d007                      		rcall	LCDWait			; Call Wait function
000276 e018                      		ldi		wait, LCDPulse	; Use wait temporarially to 
000277 9310 0062                 		sts		PORTF, wait		; to send write pulse to LCD
000279 e010                      		ldi		wait, $00		;
00027a 9310 0062                 		sts		PORTF, wait		;
00027c 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWait
                                 ;* Desc:	A wait loop that is 10 + 159*wait cycles or
                                 ;*			roughly wait*10us.  Just initialize wait
                                 ;*			for the specific amount of time in 10us 
                                 ;*			intervals.
                                 ;*******************************************************
00027d 930f                      LCDWait:push	mpr				; Save mpr
00027e e409                      LCDW_L1:ldi		mpr, $49		; Load with a 10us value
00027f 950a                      LCDW_L2:dec		mpr				; Inner Wait Loop
000280 f7f1                      		brne	LCDW_L2
000281 951a                      		dec		wait			; Outer Wait Loop
000282 f7d9                      		brne	LCDW_L1
000283 910f                      		pop		mpr				; Restore mpr
000284 9508                      		ret						; Return from Wait Function
                                 
                                 ;*******************************************************
                                 ;*	Bin2ASCII routines that can be used as a psuedo-
                                 ;*			printf function to convert an 8-bit binary
                                 ;*			number into the unigned decimal ASCII text
                                 ;*******************************************************
                                 
                                 ;***********************************************************
                                 ;* Func:	div10
                                 ;* Desc:	Divides the value in the mpr by 10 and 
                                 ;*			puts the remander in the 'r' register and
                                 ;*			and the quotiant in the 'q' register.
                                 ;*	DO NOT modify this function, trust me, it does
                                 ;*	divide by 10 :)  ~DZ		
                                 ;***********************************************************
                                 div10:
000285 920f                      		push	r0				; Save register
                                 
                                 		; q = mpr / 10 = mpr * 0.000110011001101b
000286 2f50                      		mov		q, mpr			; q = mpr * 1.0b
000287 9556                      		lsr		q				; q >> 2
000288 9556                      		lsr		q				; q = mpr * 0.01b
000289 0f50                      		add		q, mpr			; q = (q + mpr) >> 1
00028a 9556                      		lsr		q				; q = mpr * 0.101b
00028b 0f50                      		add		q, mpr			; q = (q + mpr) >> 3
00028c 9556                      		lsr		q
00028d 9556                      		lsr		q
00028e 9556                      		lsr		q				; q = mpr * 0.001101b
00028f 0f50                      		add		q, mpr			; q = (q + mpr) >> 1
000290 9556                      		lsr		q				; q = mpr * 0.1001101b
000291 0f50                      		add		q, mpr			; q = (q + mpr) >> 3
000292 9556                      		lsr		q				
000293 9556                      		lsr		q
000294 9556                      		lsr		q				; q = mpr * 0.0011001101b
000295 0f50                      		add		q, mpr			; q = (q + mpr) >> 1
000296 9556                      		lsr		q				; q = mpr * 0.10011001101b
000297 0f50                      		add		q, mpr			; q = (q + mpr) >> 4
000298 9556                      		lsr		q
000299 9556                      		lsr		q
00029a 9556                      		lsr		q
00029b 9556                      		lsr		q				; q = mpr * 0.000110011001101b
                                 
                                 		; compute the remainder as r = i - 10 * q
                                 		; calculate r = q * 10 = q * 1010b
00029c 2f65                      		mov		r, q			; r = q * 1
00029d 0f66                      		lsl		r				; r << 2
00029e 0f66                      		lsl		r				; r = q * 100b
00029f 0f65                      		add		r, q			; r = (r + q) << 1
0002a0 0f66                      		lsl		r				; r = q * 1010b
0002a1 2e06                      		mov		r0, r			; r0 = 10 * q
0002a2 2f60                      		mov		r, mpr			; r = mpr
0002a3 1960                      		sub		r, r0			; r = mpr - 10 * q
                                 
                                 		; Fix any errors that occur
0002a4 306a                      div10_1:cpi		r, 10			; Compare with 10
0002a5 f018                      		brlo	div10_2			; do nothing if r < 10
0002a6 9553                      		inc		q				; fix qoutient
0002a7 506a                      		subi	r, 10			; fix remainder
0002a8 cffb                      		rjmp	div10_1			; Continue until error is corrected
                                 
0002a9 900f                      div10_2:pop		r0				; Restore registers
0002aa 9508                      
                                 ;***********************************************************
                                 ;*	Stored Program Data
                                 ;***********************************************************
                                 
                                 MENU_1_LN1_BEG:
0002ab 6557
0002ac 636c
0002ad 6d6f
0002ae 2165
0002af 2020
0002b0 2020
0002b1 2020
0002b2 2020                      .DB		"Welcome!        "		; Declaring MENU_1_LN1 in ProgMem
                                 MENU_1_LN1_END:
                                 MENU_1_LN2_BEG:
0002b3 6c50
0002b4 6165
0002b5 6573
0002b6 7020
0002b7 6572
0002b8 7373
0002b9 5020
0002ba 3044                      .DB		"Please press PD0"		; Declaring MENU_1_LN2 in ProgMem
                                 MENU_1_LN2_END:
                                 MENU_2_LN1_BEG:
0002bb 6e45
0002bc 6574
0002bd 2072
0002be 6f57
0002bf 6472
0002c0 203a
0002c1 2020
0002c2 2020                      .DB		"Enter Word:     "		; Declaring MENU_1_LN1 in ProgMem
                                 MENU_2_LN1_END:
                                 ;Declaring the morse code for each letter of the alphabet
                                 ;The number of symbols for each letter is defined after the letters
                                 ;0 - dot, 1 - dash
                                 MORSE_ALPHABET_BEG:
0002c3 0040                      .DB 0b01000000, $00 ;A
0002c4 0080                      .DB 0b10000000, $00 ;B
0002c5 00a0                      .DB 0b10100000, $00 ;C
0002c6 0080                      .DB 0b10000000, $00 ;D
0002c7 0000                      .DB 0b00000000, $00 ;E
0002c8 0020                      .DB 0b00100000, $00 ;F
0002c9 00c0                      .DB 0b11000000, $00 ;G
0002ca 0000                      .DB 0b00000000, $00 ;H
0002cb 0000                      .DB 0b00000000, $00 ;I
0002cc 0070                      .DB 0b01110000, $00 ;J
0002cd 00a0                      .DB 0b10100000, $00 ;K
0002ce 0040                      .DB 0b01000000, $00 ;L
0002cf 00c0                      .DB 0b11000000, $00 ;M
0002d0 0080                      .DB 0b10000000, $00 ;N
0002d1 00e0                      .DB 0b11100000, $00 ;O
0002d2 0060                      .DB 0b01100000, $00 ;P
0002d3 00d0                      .DB 0b11010000, $00 ;Q
0002d4 0040                      .DB 0b01000000, $00 ;R
0002d5 0000                      .DB 0b00000000, $00 ;S
0002d6 0080                      .DB 0b10000000, $00 ;T
0002d7 0020                      .DB 0b00100000, $00 ;U
0002d8 0010                      .DB 0b00010000, $00 ;V
0002d9 0060                      .DB 0b01100000, $00 ;W
0002da 0090                      .DB 0b10010000, $00 ;X
0002db 00b0                      .DB 0b10110000, $00 ;Y
0002dc 00c0                      .DB 0b11000000, $00 ;Z
                                 MORSE_ALPHABED_END:
                                 ;Defines number of symbols per letter in morse
                                 MORSE_ALPHABET_LEN_BEG:
0002dd 0002                      .DB $02, $00 ;A
0002de 0004                      .DB $04, $00 ;B
0002df 0004                      .DB $04, $00 ;C
0002e0 0003                      .DB $03, $00 ;D
0002e1 0001                      .DB $01, $00 ;E
0002e2 0004                      .DB $04, $00 ;F
0002e3 0003                      .DB $03, $00 ;G
0002e4 0004                      .DB $04, $00 ;H
0002e5 0002                      .DB $02, $00 ;I
0002e6 0004                      .DB $04, $00 ;J
0002e7 0003                      .DB $03, $00 ;K
0002e8 0004                      .DB $04, $00 ;L
0002e9 0002                      .DB $02, $00 ;M
0002ea 0002                      .DB $02, $00 ;N
0002eb 0003                      .DB $03, $00 ;O
0002ec 0004                      .DB $04, $00 ;P
0002ed 0004                      .DB $04, $00 ;Q
0002ee 0003                      .DB $03, $00 ;R
0002ef 0003                      .DB $03, $00 ;S
0002f0 0001                      .DB $01, $00 ;T
0002f1 0003                      .DB $03, $00 ;U
0002f2 0004                      .DB $04, $00 ;V
0002f3 0003                      .DB $03, $00 ;W
0002f4 0004                      .DB $04, $00 ;X
0002f5 0004                      .DB $04, $00 ;Y
0002f6 0004                      .DB $04, $00 ;Z
                                 MORSE_ALPHABET_LEN_END:
                                 
                                 ;***********************************************************
                                 ;*	Data Memory Allocation
                                 ;***********************************************************
                                 .dseg
                                 
                                 ;memory allocation for letters that were confirmed and number of symbols per letter
                                 .org $0200
000200                           Confirmed_Letters_BEG: .byte 8
                                 .org $0210


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega128" register use summary:
x  :  12 y  :   2 z  :   9 r0 :   4 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   6 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 183 r17:  27 r18:  23 r19:  23 r20:  11 
r21:  32 r22:  17 r23:  25 r24:   9 r25:   8 r26:  27 r27:  24 r28:   2 
r29:   2 r30:  30 r31:  27 
Registers used: 21 out of 35 (60.0%)

"ATmega128" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   9 adiw  :   7 and   :   0 
andi  :   1 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   1 break :   0 breq  :  17 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 brlt  :   0 brmi  :   0 
brne  :  18 brpl  :   0 brsh  :   1 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   7 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   4 cpc   :   0 
cpi   :  25 cpse  :   0 dec   :  17 elpm  :   0 eor   :   0 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   3 inc   :   5 
jmp   :   0 ld    :   3 ldd   :   0 ldi   : 114 lds   :   0 lpm   :   7 
lsl   :   4 lsr   :  15 mov   :  20 movw  :   0 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  29 
pop   :  85 push  :  74 rcall :  68 ret   :  32 reti  :   0 rjmp  :  17 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   0 
sbis  :   0 sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  11 std   :   0 
sts   :   8 sub   :   2 subi  :   1 swap  :   0 tst   :   0 wdr   :   0 

Instructions used: 30 out of 114 (26.3%)

"ATmega128" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0005ee   1228    152   1380  131072   1.1%
[.dseg] 0x000100 0x000218      0     16     16    4096   0.4%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 6 warnings
