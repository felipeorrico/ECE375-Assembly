
Lab2-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000154  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ad  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e5  00000000  00000000  00000be1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f5  00000000  00000000  000013c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000016bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044b  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b0  00000000  00000000  00001b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001cdb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	5a c0       	rjmp	.+180    	; 0x150 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <util/delay.h>
#include <stdio.h>

int main(void)
{
	DDRB = 0b11110000;
  9e:	80 ef       	ldi	r24, 0xF0	; 240
  a0:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b11110000;
  a2:	88 bb       	out	0x18, r24	; 24
	DDRD = 0b00000000;
  a4:	11 ba       	out	0x11, r1	; 17
	PORTD = 0b11111111;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	82 bb       	out	0x12, r24	; 18
	
	PORTB = 0b01100000;     // make TekBot move forward
  aa:	80 e6       	ldi	r24, 0x60	; 96
  ac:	88 bb       	out	0x18, r24	; 24
	
	while (1) // loop forever
	{
		if (PIND == 0b11111100) { //both were hit
  ae:	80 b3       	in	r24, 0x10	; 16
  b0:	8c 3f       	cpi	r24, 0xFC	; 252
  b2:	c1 f4       	brne	.+48     	; 0xe4 <main+0x46>
			PORTB = 0b00000000;     // move backward
  b4:	18 ba       	out	0x18, r1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	83 ed       	ldi	r24, 0xD3	; 211
  ba:	90 e3       	ldi	r25, 0x30	; 48
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x1e>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x28>
  c6:	00 00       	nop
			_delay_ms(1000);         // wait for 1s
			PORTB = 0b00100000;     // turn left
  c8:	80 e2       	ldi	r24, 0x20	; 32
  ca:	88 bb       	out	0x18, r24	; 24
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	83 ed       	ldi	r24, 0xD3	; 211
  d0:	90 e3       	ldi	r25, 0x30	; 48
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x34>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x3e>
  dc:	00 00       	nop
			_delay_ms(1000);        // wait for 1 s
			PORTB = 0b01100000;     // make TekBot move forward
  de:	80 e6       	ldi	r24, 0x60	; 96
  e0:	88 bb       	out	0x18, r24	; 24
			continue;
  e2:	e5 cf       	rjmp	.-54     	; 0xae <main+0x10>
		}
		else if (PIND == 0b11111101) {//check for left hit and right not hit
  e4:	80 b3       	in	r24, 0x10	; 16
  e6:	8d 3f       	cpi	r24, 0xFD	; 253
  e8:	c1 f4       	brne	.+48     	; 0x11a <main+0x7c>
			PORTB = 0b00000000;     // move backward
  ea:	18 ba       	out	0x18, r1	; 24
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	83 ed       	ldi	r24, 0xD3	; 211
  f0:	90 e3       	ldi	r25, 0x30	; 48
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x54>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x5e>
  fc:	00 00       	nop
			_delay_ms(1000);         // wait for 1s
			PORTB = 0b01000000;     // turn right
  fe:	80 e4       	ldi	r24, 0x40	; 64
 100:	88 bb       	out	0x18, r24	; 24
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	83 ed       	ldi	r24, 0xD3	; 211
 106:	90 e3       	ldi	r25, 0x30	; 48
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x6a>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x74>
 112:	00 00       	nop
			_delay_ms(1000);        // wait for 1 s
			PORTB = 0b01100000;     // make TekBot move forward
 114:	80 e6       	ldi	r24, 0x60	; 96
 116:	88 bb       	out	0x18, r24	; 24
			continue;
 118:	ca cf       	rjmp	.-108    	; 0xae <main+0x10>
		}
		else if (PIND == 0b11111110) { //check for right hit and left not hit
 11a:	80 b3       	in	r24, 0x10	; 16
 11c:	8e 3f       	cpi	r24, 0xFE	; 254
 11e:	39 f6       	brne	.-114    	; 0xae <main+0x10>
			PORTB = 0b00000000;     // move backward
 120:	18 ba       	out	0x18, r1	; 24
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	83 ed       	ldi	r24, 0xD3	; 211
 126:	90 e3       	ldi	r25, 0x30	; 48
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x8a>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x94>
 132:	00 00       	nop
			_delay_ms(1000);         // wait for 1s
			PORTB = 0b00100000;     // turn left
 134:	80 e2       	ldi	r24, 0x20	; 32
 136:	88 bb       	out	0x18, r24	; 24
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	83 ed       	ldi	r24, 0xD3	; 211
 13c:	90 e3       	ldi	r25, 0x30	; 48
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0xa0>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0xaa>
 148:	00 00       	nop
			_delay_ms(1000);        // wait for 1 s
			PORTB = 0b01100000;     // make TekBot move forward
 14a:	80 e6       	ldi	r24, 0x60	; 96
 14c:	88 bb       	out	0x18, r24	; 24
			continue;
 14e:	af cf       	rjmp	.-162    	; 0xae <main+0x10>

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
