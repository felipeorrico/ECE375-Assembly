
AVRASM ver. 2.2.8  G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 6\CODE\Lab 6\Lab 6\main.asm Thu Feb 11 18:40:41 2021

[builtin](2): Including file 'D:/Atmel\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m128def.inc'
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 6\CODE\Lab 6\Lab 6\main.asm(16): Including file 'D:/Atmel\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m128def.inc'
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 6\CODE\Lab 6\Lab 6\main.asm(82): Including file 'G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 6\CODE\Lab 6\Lab 6\LCDDriver.asm'
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 6\CODE\Lab 6\Lab 6\LCDDriver.asm(38): warning: Register r17 already defined by the .DEF directive
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 6\CODE\Lab 6\Lab 6\main.asm(82): 'G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 6\CODE\Lab 6\Lab 6\LCDDriver.asm' included form here
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 6\CODE\Lab 6\Lab 6\LCDDriver.asm(39): warning: Register r18 already defined by the .DEF directive
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 6\CODE\Lab 6\Lab 6\main.asm(82): 'G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 6\CODE\Lab 6\Lab 6\LCDDriver.asm' included form here
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 6\CODE\Lab 6\Lab 6\LCDDriver.asm(40): warning: Register r19 already defined by the .DEF directive
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 6\CODE\Lab 6\Lab 6\main.asm(82): 'G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 6\CODE\Lab 6\Lab 6\LCDDriver.asm' included form here
[builtin](2): Including file 'D:/Atmel\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m128def.inc'
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 6\CODE\Lab 6\Lab 6\main.asm(16): Including file 'D:/Atmel\7.0\Packs\atmel\ATmega_DFP\1.6.364\avrasm\inc\m128def.inc'
G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 6\CODE\Lab 6\Lab 6\main.asm(82): Including file 'G:\My Drive\Classes\4th Year\Winter 2021\Assembly - ECE375\Labs\Lab 6\CODE\Lab 6\Lab 6\LCDDriver.asm'
                                 
                                 ;***********************************************************
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega128.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m128def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega128
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega128
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M128DEF_INC_
                                 #define _M128DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega128
                                 #pragma AVRPART ADMIN PART_NAME ATmega128
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x97
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UCSR1C	= 0x9d	; MEMORY MAPPED
                                 .equ	UDR1	= 0x9c	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0x9b	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0x9a	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0x98	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0x99	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0x95	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0x90	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x8c	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x8b	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x8a	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x88	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x89	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x86	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x87	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x84	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x85	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x82	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x83	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x80	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x81	; MEMORY MAPPED
                                 .equ	ETIMSK	= 0x7d	; MEMORY MAPPED
                                 .equ	ETIFR	= 0x7c	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x7a	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x78	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x79	; MEMORY MAPPED
                                 .equ	TWCR	= 0x74	; MEMORY MAPPED
                                 .equ	TWDR	= 0x73	; MEMORY MAPPED
                                 .equ	TWAR	= 0x72	; MEMORY MAPPED
                                 .equ	TWSR	= 0x71	; MEMORY MAPPED
                                 .equ	TWBR	= 0x70	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x6f	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x6d	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x6c	; MEMORY MAPPED
                                 .equ	EICRA	= 0x6a	; MEMORY MAPPED
                                 .equ	SPMCSR	= 0x68	; MEMORY MAPPED
                                 .equ	PORTG	= 0x65	; MEMORY MAPPED
                                 .equ	DDRG	= 0x64	; MEMORY MAPPED
                                 .equ	PING	= 0x63	; MEMORY MAPPED
                                 .equ	PORTF	= 0x62	; MEMORY MAPPED
                                 .equ	DDRF	= 0x61	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	XDIV	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	EICRB	= 0x3a
                                 .equ	EIMSK	= 0x39
                                 .equ	EIFR	= 0x38
                                 .equ	TIMSK	= 0x37
                                 .equ	TIFR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OCR0	= 0x31
                                 .equ	ASSR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	OCDR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	SFIOR	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR0	= 0x0c
                                 .equ	UCSR0A	= 0x0b
                                 .equ	UCSR0B	= 0x0a
                                 .equ	UBRR0L	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	PORTE	= 0x03
                                 .equ	DDRE	= 0x02
                                 .equ	PINE	= 0x01
                                 .equ	PINF	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR00	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR01	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR02	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR03	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR04	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR05	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR06	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR07	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	UCSZ2	= UCSZ02	; For compatibility
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL0	= 6	; USART Mode Select
                                 
                                 ; UBRR0H - USART Baud Rate Register Hight Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR10	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR11	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR12	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR13	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR14	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR15	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR16	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR17	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL1	= 6	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register Hight Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	SM2	= 2	; Sleep Mode Select
                                 .equ	SM0	= 3	; Sleep Mode Select
                                 .equ	SM1	= 4	; Sleep Mode Select
                                 .equ	SE	= 5	; Sleep Enable
                                 .equ	SRW10	= 6	; External SRAM Wait State Select
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW11	= 1	; Wait state select bit upper page
                                 .equ	SRW00	= 2	; Wait state select bit lower page
                                 .equ	SRW01	= 3	; Wait state select bit lower page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value
                                 .equ	CAL1	= 1	; Oscillator Calibration Value
                                 .equ	CAL2	= 2	; Oscillator Calibration Value
                                 .equ	CAL3	= 3	; Oscillator Calibration Value
                                 .equ	CAL4	= 4	; Oscillator Calibration Value
                                 .equ	CAL5	= 5	; Oscillator Calibration Value
                                 .equ	CAL6	= 6	; Oscillator Calibration Value
                                 .equ	CAL7	= 7	; Oscillator Calibration Value
                                 
                                 ; XDIV - XTAL Divide Control Register
                                 .equ	XDIV0	= 0	; XTAl Divide Select Bit 0
                                 .equ	XDIV1	= 1	; XTAl Divide Select Bit 1
                                 .equ	XDIV2	= 2	; XTAl Divide Select Bit 2
                                 .equ	XDIV3	= 3	; XTAl Divide Select Bit 3
                                 .equ	XDIV4	= 4	; XTAl Divide Select Bit 4
                                 .equ	XDIV5	= 5	; XTAl Divide Select Bit 5
                                 .equ	XDIV6	= 6	; XTAl Divide Select Bit 6
                                 .equ	XDIVEN	= 7	; XTAL Divide Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMCR	= SPMCSR	; For compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 
                                 ; ***** MISC *************************
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR321	= 0	; Prescaler Reset Timer/Counter3, Timer/Counter2, and Timer/Counter1
                                 .equ	PSR1	= PSR321	; For compatibility
                                 .equ	PSR2	= PSR321	; For compatibility
                                 .equ	PSR3	= PSR321	; For compatibility
                                 .equ	PSR0	= 1	; Prescaler Reset Timer/Counter0
                                 .equ	PUD	= 2	; Pull Up Disable
                                 ;.equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	GICR	= EIMSK	; For compatibility
                                 .equ	GIMSK	= EIMSK	; For compatibility
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	GIFR	= EIFR	; For compatibility
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 0
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; ASSR - Asynchronus Status Register
                                 .equ	TCR0UB	= 0	; Timer/Counter Control Register 0 Update Busy
                                 .equ	OCR0UB	= 1	; Output Compare register 0 Busy
                                 .equ	TCN0UB	= 2	; Timer/Counter0 Update Busy
                                 .equ	AS0	= 3	; Asynchronus Timer/Counter 0
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR0	= 1	; Prescaler Reset Timer/Counter0
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; ETIMSK - Extended Timer/Counter Interrupt Mask Register
                                 .equ	OCIE1C	= 0	; Timer/Counter 1, Output Compare Match C Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; ETIFR - Extended Timer/Counter Interrupt Flag register
                                 .equ	OCF1C	= 0	; Timer/Counter 1, Output Compare C Match Flag
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR321	= 0	; Prescaler Reset, T/C3, T/C2, T/C1
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode Bit 0
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode Bit 1
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Clock Select bit 0
                                 .equ	CS11	= 1	; Clock Select 1 bit 1
                                 .equ	CS12	= 2	; Clock Select1 bit 2
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare for channel C
                                 .equ	FOC1B	= 6	; Force Output Compare for channel B
                                 .equ	FOC1A	= 7	; Force Output Compare for channel A
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TCCR2 - Timer/Counter Control Register
                                 .equ	CS20	= 0	; Clock Select
                                 .equ	CS21	= 1	; Clock Select
                                 .equ	CS22	= 2	; Clock Select
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Match Output Mode
                                 .equ	COM21	= 5	; Compare Match Output Mode
                                 .equ	WGM20	= 6	; Wafeform Generation Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter Register
                                 .equ	TCNT2_0	= 0	; Timer/Counter Register Bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter Register Bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter Register Bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter Register Bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter Register Bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter Register Bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter Register Bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter Register Bit 7
                                 
                                 ; OCR2 - Output Compare Register
                                 .equ	OCR2_0	= 0	; Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Output Compare Register Bit 7
                                 
                                 ; TIMSK - 
                                 .equ	TOIE2	= 6	; 
                                 .equ	OCIE2	= 7	; 
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; ETIMSK - Extended Timer/Counter Interrupt Mask Register
                                 .equ	OCIE3C	= 1	; Timer/Counter3, Output Compare Match Interrupt Enable
                                 .equ	TOIE3	= 2	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3B	= 3	; Timer/Counter3 Output CompareB Match Interrupt Enable
                                 .equ	OCIE3A	= 4	; Timer/Counter3 Output CompareA Match Interrupt Enable
                                 .equ	TICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; ETIFR - Extended Timer/Counter Interrupt Flag register
                                 .equ	OCF3C	= 1	; Timer/Counter3 Output Compare C Match Flag
                                 .equ	TOV3	= 2	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3B	= 3	; Output Compare Flag 1B
                                 .equ	OCF3A	= 4	; Output Compare Flag 1A
                                 .equ	ICF3	= 5	; Input Capture Flag 1
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR321	= 0	; Prescaler Reset, T/C3, T/C2, T/C1
                                 ;.equ	PSR1	= PSR321	; For compatibility
                                 ;.equ	PSR2	= PSR321	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode Bit 0
                                 .equ	PWM30	= WGM30	; For compatibility
                                 .equ	WGM31	= 1	; Waveform Generation Mode Bit 1
                                 .equ	PWM31	= WGM31	; For compatibility
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Comparet Ouput Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 3A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Clock Select 3 bit 0
                                 .equ	CS31	= 1	; Clock Select 3 bit 1
                                 .equ	CS32	= 2	; Clock Select3 bit 2
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	CTC30	= WGM32	; For compatibility
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	CTC31	= WGM33	; For compatibility
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3  Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare for channel C
                                 .equ	FOC3B	= 6	; Force Output Compare for channel B
                                 .equ	FOC3A	= 7	; Force Output Compare for channel A
                                 
                                 ; TCNT3L - Timer/Counter3 Low Byte
                                 .equ	TCN3L0	= 0	; Timer/Counter 3 bit 0
                                 .equ	TCN3L1	= 1	; Timer/Counter 3 bit 1
                                 .equ	TCN3L2	= 2	; Timer/Counter 3 bit 2
                                 .equ	TCN3L3	= 3	; Timer/Counter 3 bit 3
                                 .equ	TCN3L4	= 4	; Timer/Counter 3 bit 4
                                 .equ	TCN3L5	= 5	; Timer/Counter 3 bit 5
                                 .equ	TCN3L6	= 6	; Timer/Counter 3 bit 6
                                 .equ	TCN3L7	= 7	; Timer/Counter 3 bit 7
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDTCSR	= WDTCR	; For compatibility
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDTOE	= WDCE	; For compatibility
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADFR	= 5	; ADC  Free Running Select
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	WDTON	= 0	; Watchdog timer always on
                                 .equ	M103C	= 1	; ATmega103 compatibility mode
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0xffff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 4096
                                 .equ	RAMEND	= 0x10ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 131072
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 4096
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0xf000
                                 .equ	NRWW_STOP_ADDR	= 0xffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0xefff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0xfe00
                                 .equ	SECONDBOOTSTART	= 0xfc00
                                 .equ	THIRDBOOTSTART	= 0xf800
                                 .equ	FOURTHBOOTSTART	= 0xf000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	OC2addr	= 0x0012	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0014	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0016	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0018	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x001a	; Timer/Counter Compare Match B
                                 .equ	OVF1addr	= 0x001c	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x001e	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0020	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0024	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0026	; USART0 Data Register Empty
                                 .equ	UTXC0addr	= 0x0028	; USART0, Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	OC1Caddr	= 0x0030	; Timer/Counter1 Compare Match C
                                 .equ	ICP3addr	= 0x0032	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0034	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0036	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0038	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x003a	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x003c	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x003e	; USART1, Data Register Empty
                                 .equ	UTXC1addr	= 0x0040	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x0042	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0044	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 70	; size in words
                                 
                                 #endif  /* _M128DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;*
                                 ;*	Enter Name of file here
                                 ;*
                                 ;*	Enter the description of the program here
                                 ;*
                                 ;*	This is the skeleton file for Lab 6 of ECE 375
                                 ;*
                                 ;***********************************************************
                                 ;*
                                 ;*	 Author: Enter your name
                                 ;*	   Date: Enter Date
                                 ;*
                                 ;***********************************************************
                                 
                                 .include "m128def.inc"			; Include definition file
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega128.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m128def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega128
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega128
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M128DEF_INC_
                                 #endif  /* _M128DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;***********************************************************
                                 ;*	Internal Register Definitions and Constants
                                 ;***********************************************************
                                 .def	mpr = r16				; Multipurpose register 
                                 
                                 .def	waitcnt = r17			; Wait Loop Counter
                                 .def	ilcnt = r18				; Inner Loop Counter
                                 .def	olcnt = r19				; Outer Loop Counter
                                 .def	lcount = r7			; Counter for left clicks
                                 .def	rcount = r6			; Counter for right clicks
                                 .def	zero = r5
                                 
                                 .equ	WTime = 100				; Time to wait in wait loop
                                 
                                 .equ	WskrR = 0				; Right Whisker Input Bit
                                 .equ	WskrL = 1				; Left Whisker Input Bit
                                 .equ	EngEnR = 4				; Right Engine Enable Bit
                                 .equ	EngEnL = 7				; Left Engine Enable Bit
                                 .equ	EngDirR = 5				; Right Engine Direction Bit
                                 .equ	EngDirL = 6				; Left Engine Direction Bit
                                 
                                 ;/////////////////////////////////////////////////////////////
                                 ;These macros are the values to make the TekBot Move.
                                 ;/////////////////////////////////////////////////////////////
                                 
                                 .equ	MovFwd = (1<<EngDirR|1<<EngDirL)	; Move Forward Command
                                 .equ	MovBck = $00				; Move Backward Command
                                 .equ	TurnR = (1<<EngDirL)			; Turn Right Command
                                 .equ	TurnL = (1<<EngDirR)			; Turn Left Command
                                 .equ	Halt = (1<<EngEnR|1<<EngEnL)		; Halt Command
                                 
                                 ;***********************************************************
                                 ;*	Start of Code Segment
                                 ;***********************************************************
                                 .cseg							; Beginning of code segment
                                 
                                 ;***********************************************************
                                 ;*	Interrupt Vectors
                                 ;***********************************************************
                                 .org	$0000					; Beginning of IVs
000000 c15f                      		rjmp 	INIT			; Reset interrup
                                 
                                 		; Set up interrupt vectors for any interrupts being used
                                 .org	$0002				;INT0 Interrupt Vector
000002 d194                      		rcall HitRight		;interrupt handler
000003 9518                      		reti
                                 
                                 .org	$0004				;INT1 interrupt vector
000004 d1b3                      		rcall HitLeft		;interrup handler
000005 9518                      		reti
                                 			
                                 .org	$0006				;INT2 interrupt vector
000006 d17c                      		rcall ClearRight	;interrupt handler
000007 9518                      		reti
                                 
                                 .org	$0008				;INT3 interrupt vector
000008 d184                      		rcall ClearLeft		;interrupt handler
000009 9518                      		reti
                                 
                                 .org	$0046					; End of Interrupt Vectors
                                 
                                 ;***********************************************************
                                 ;*	Additional Program Includes
                                 ;***********************************************************
                                 .include "LCDDriver.asm"
                                 
                                 ;*
                                 ;*	LCDDriver.asm	-	V2.0
                                 ;*
                                 ;*	Contains the neccessary functions to display text to a
                                 ;*	2 x 16 character LCD Display.  Additional functions
                                 ;*	include a conversion routine from an unsigned 8-bit
                                 ;*	binary number to and ASCII text string.
                                 ;*
                                 ;*	Version 2.0 - Added support for accessing the LCD 
                                 ;*		Display via the serial port. See version 1.0 for 
                                 ;*		accessing a memory mapped LCD display.
                                 ;*
                                 ;***********************************************************
                                 ;*
                                 ;*	 Author: David Zier
                                 ;*	   Date: March 17, 2003
                                 ;*	Company: TekBots(TM), Oregon State University - EECS
                                 ;*	Version: 2.0
                                 ;*
                                 ;***********************************************************
                                 ;*	Rev	Date	Name		Description
                                 ;*----------------------------------------------------------
                                 ;*	-	8/20/02	Zier		Initial Creation of Version 1.0
                                 ;*	A	3/7/03	Zier		V2.0 - Updated for USART LCD
                                 ;*
                                 ;*
                                 ;***********************************************************
                                 
                                 ;***********************************************************
                                 ;*	Internal Register Definitions and Constants
                                 ;*		NOTE: A register MUST be named 'mpr' in the Main Code
                                 ;*			It is recomended to use register r16.
                                 ;*		WARNING: Register r17-r22 are reserved and cannot be
                                 ;*			renamed outside of the LCD Driver functions. Doing
                                 ;*			so will damage the functionality of the LCD Driver
                                 ;***********************************************************
                                 .def	wait = r17				; Wait Loop Register
                                 .def	count = r18				; Character Counter
                                 .def	line = r19				; Line Select Register
                                 .def	type = r20				; LCD data type: Command or Text
                                 .def	q = r21					; Quotient for div10
                                 .def	r = r22					; Remander for div10
                                 
                                 .equ	LCDLine1 = $80			; LCD Line 1 select command
                                 .equ	LCDLine2 = $c0			; LCD Line 2 select command
                                 .equ	LCDClear = $01			; LCD Clear Command
                                 .equ	LCDHome = $02			; LCD Set Cursor Home Command
                                 .equ	LCDPulse = $08			; LCD Pulse signal, used to simulate 
                                 								; write signal
                                 
                                 .equ	LCDCmd = $00			; Constant used to write a command 
                                 .equ	LCDTxt = $01			; Constant used to write a text character
                                 
                                 .equ	LCDMaxCnt = 16			; Maximum number of characters per line
                                 .equ	LCDLn1Addr = $0100		; Beginning address for Line 1 data
                                 .equ	LCDLn2Addr = $0110		; Beginning address for Line 2 data
                                 
                                 ;-----------------------------------------------------------
                                 ;***********************************************************
                                 ;*	Public LCD Driver Suboutines and Functions
                                 ;*		These functions and subroutines can be called safely 
                                 ;*		from within any program
                                 ;***********************************************************
                                 ;-----------------------------------------------------------
                                 
                                 
                                 ;*******************************************************
                                 ;* SubRt: 	LCDInit
                                 ;* Desc: 	Initialize the Serial Port and the Hitachi 
                                 ;*			Display 8 Bit inc DD-RAM 
                                 ;*			Pointer with no features
                                 ;*			- 2 LInes with 16 characters
                                 ;*******************************************************
                                 LCDInit:
000046 930f                      		push	mpr				; Save the state of machine
000047 b70f                      		in		mpr, SREG		; Save the SREG
000048 930f                      		push	mpr				;
000049 931f                      		push	wait			; Save wait
                                 
                                 		; Setup the Communication Ports
                                 		; Port B: Output
                                 		; Port D: Input w/ internal pullup resistors
                                 		; Port F: Output on Pin 3
00004a e000                      		ldi		mpr, $00		; Initialize Port B for outputs
00004b bb08                      		out		PORTB, mpr		; Port B outputs high
00004c ef0f                      		ldi		mpr, $ff		; except for any overrides
00004d bb07                      		out		DDRB, mpr		;
00004e e000                      		ldi		mpr, $00		; Initialize Port D for inputs
00004f bb02                      		out		PORTD, mpr		; with Tri-State
000050 e000                      		ldi		mpr, $00		; except for any overrides
000051 bb01                      		out		DDRD, mpr		;
000052 e000                      		ldi		mpr, $00		; Initialize Port F Pin 3 to
000053 9300 0062                 		sts		PORTF, mpr		; output inorder to twiddle the
000055 e008                      		ldi		mpr, (1<<DDF3)	; LCD interface
000056 9300 0061                 		sts		DDRF, mpr		; Must NOT override this port
                                 
                                 		; Setup the Serial Functionality
                                 		; SPI Type: Master
                                 		; SPI Clock Rate: 2*1000.000 kHz
                                 		; SPI Clock Phase: Cycle Half
                                 		; SPI Clock Polarity: Low
                                 		; SPI Data Order: MSB First
000058 e500                      		ldi		mpr, (1<<SPE|1<<MSTR)
000059 b90d                      		out		SPCR, mpr		; Set Serial Port Control Register
00005a e001                      		ldi		mpr, (1<<SPI2X)
00005b b90e                      		out		SPSR, mpr		; Set Serial Port Status Register
                                 
                                 		; Setup External SRAM configuration
                                 		; $0460 - $7FFF / $8000 - $FFFF
                                 		; Lower page wait state(s): None
                                 		; Uppoer page wait state(s): 2r/w
00005c e800                      		ldi		mpr, (1<<SRE)	; 
00005d bf05                      		out		MCUCR, mpr		; Initialize MCUCR
00005e e402                      		ldi		mpr, (1<<SRL2|1<<SRW11)
00005f 9300 006d                 		sts		XMCRA, mpr		; Initialize XMCRA
000061 e800                      		ldi		mpr, (1<<XMBK)	;
000062 9300 006c                 		sts		XMCRB, mpr		; Initialize XMCRB
                                 		
                                 		; Initialize USART0
                                 		; Communication Parameter: 8 bit, 1 stop, No Parity
                                 		; USART0 Rx: On
                                 		; USART0 Tx: On
                                 		; USART0 Mode: Asynchronous
                                 		; USART0 Baudrate: 9600
000064 e000                      		ldi		mpr, $00		;
000065 b90b                      		out		UCSR0A, mpr		; Init UCSR0A
000066 e108                      		ldi		mpr, (1<<RXEN0|1<<TXEN0)
000067 b90a                      		out		UCSR0B, mpr		; Init UCSR0B
000068 e006                      		ldi		mpr, (1<<UCSZ01|1<<UCSZ00)
000069 9300 0095                 		sts		UCSR0C, mpr		; Init UCSR0C
00006b e000                      		ldi		mpr, $00		;
00006c 9300 0090                 		sts		UBRR0H, mpr		; Init UBRR0H
00006e e607                      		ldi		mpr, $67		;
00006f b909                      		out		UBRR0L, mpr		; Init UBRR0L
                                 
                                 		; Initialize the LCD Display
000070 e006                      		ldi		mpr, 6			;
                                 LCDINIT_L1:
000071 ef1a                      		ldi		wait, 250		; 15ms of Display
000072 d0bf                      		rcall	LCDWait			; Bootup wait
000073 950a                      		dec		mpr				;
000074 f7e1                      		brne	LCDINIT_L1		;
                                 
000075 e308                      		ldi		mpr, $38		; Display Mode set
000076 d097                      		rcall 	LCDWriteCmd		; 
000077 e008                      		ldi		mpr, $08		; Display Off
000078 d095                      		rcall	LCDWriteCmd		;
000079 e001                      		ldi		mpr, $01		; Display Clear
00007a d093                      		rcall	LCDWriteCmd		;
00007b e006                      		ldi		mpr, $06		; Entry mode set
00007c d091                      		rcall	LCDWriteCmd		;
00007d e00c                      		ldi		mpr, $0c		; Display on
00007e d08f                      		rcall	LCDWriteCmd		;
00007f d028                      		rcall	LCDClr			; Clear display
                                 
000080 911f                      		pop		wait			; Restore wait
000081 910f                      		pop		mpr				; Restore SREG
000082 bf0f                      		out		SREG, mpr		;
000083 910f                      		pop		mpr				; Restore mpr
000084 9508                      		ret						; Return from subroutine
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWrite
                                 ;* Desc:	Generic Write Function that writes both lines
                                 ;*			of text out to the LCD
                                 ;*			- Line 1 data is in address space $0100-$010F
                                 ;*			- Line 2 data is in address space $0110-$010F
                                 ;*******************************************************
                                 LCDWrite:
000085 d002                      		rcall LCDWrLn1			; Write Line 1
000086 d011                      		rcall LCDWrLn2			; Write Line 2
000087 9508                      		ret 					; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWrLn1
                                 ;* Desc:	This function will write the first line of 
                                 ;*			data to the first line of the LCD Display
                                 ;*******************************************************
                                 LCDWrLn1:
000088 930f                      		push 	mpr				; Save mpr
000089 93ef                      		push	ZL				; Save Z pointer
00008a 93ff                      		push	ZH				;
00008b 932f                      		push	count			; Save the count register
00008c 933f                      		push	line			; Save the line register
                                 								
00008d e0e0                      		ldi		ZL, low(LCDLn1Addr)
00008e e0f1                      		ldi		ZH, high(LCDLn1Addr)		 
00008f e830                      		ldi		line, LCDLine1	; Set LCD line to Line 1
000090 d06b                      		rcall	LCDSetLine		; Restart at the beginning of line 1
000091 d076                      		rcall	LCDWriteLine	; Write the line of text
                                 
000092 913f                      		pop		line
000093 912f                      		pop		count			; Restore the counter
000094 91ff                      		pop		ZH				; Restore Z pointer
000095 91ef                      		pop		ZL				;
000096 910f                      		pop 	mpr				; Restore mpr
000097 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWrLn2
                                 ;* Desc:	This function will write the second line of 
                                 ;*			data to the second line of the LCD Display
                                 ;*******************************************************
                                 LCDWrLn2:
000098 930f                      		push 	mpr				; Save mpr
000099 93ef                      		push	ZL				; Save Z pointer
00009a 93ff                      		push	ZH				;
00009b 932f                      		push	count			; Save the count register
00009c 933f                      		push	line			; Save the line register
                                 								
00009d e1e0                      		ldi		ZL, low(LCDLn2Addr)
00009e e0f1                      		ldi		ZH, high(LCDLn2Addr)		 
00009f ec30                      		ldi		line, LCDLine2	; Set LCD line to Line 2
0000a0 d05b                      		rcall	LCDSetLine		; Restart at the beginning of line 2
0000a1 d066                      		rcall	LCDWriteLine	; Write the line of text
                                 
0000a2 913f                      		pop		line
0000a3 912f                      		pop		count			; Restore the counter
0000a4 91ff                      		pop		ZH				; Restore Z pointer
0000a5 91ef                      		pop		ZL				;
0000a6 910f                      		pop 	mpr				; Restore mpr
0000a7 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDClr
                                 ;* Desc:	Generic Clear Subroutine that clears both 
                                 ;*			lines of the LCD and Data Memory storage area
                                 ;*******************************************************
                                 LCDClr:
0000a8 d002                      		rcall	LCDClrLn1		; Clear Line 1
0000a9 d011                      		rcall	LCDClrLn2		; Clear Line 2
0000aa 9508                      		ret						; Return from Subroutine
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDClrLn1
                                 ;* Desc:	This subroutine will clear the first line of 
                                 ;*			the data and the first line of the LCD Display
                                 ;*******************************************************
                                 LCDClrLn1:
0000ab 930f                      		push	mpr				; Save mpr
0000ac 933f                      		push	line			; Save line register
0000ad 932f                      		push	count			; Save the count register
0000ae 93ef                      		push	ZL				; Save Z pointer
0000af 93ff                      		push	ZH				;
                                 	
0000b0 e830                      		ldi		line, LCDline1	; Set Access to Line 1 of LCD
0000b1 d04a                      		rcall	LCDSetLine		; Set Z pointer to address of line 1 data
0000b2 e0e0                      		ldi		ZL, low(LCDLn1Addr)
0000b3 e0f1                      		ldi		ZH, high(LCDLn1Addr)
0000b4 d04c                      		rcall	LCDClrLine		; Call the Clear Line function
                                 
0000b5 91ff                      		pop		ZH				; Restore Z pointer
0000b6 91ef                      		pop		ZL				;
0000b7 912f                      		pop		count			; Restore the count register
0000b8 913f                      		pop		line			; Restore line register
0000b9 910f                      		pop		mpr				; Restore mpr
0000ba 9508                      		ret						; Return from Subroutine
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDClrLn2
                                 ;* Desc:	This subroutine will clear the second line of 
                                 ;*			the data and the second line of the LCD Display
                                 ;*******************************************************
                                 LCDClrLn2:
0000bb 930f                      		push	mpr				; Save mpr
0000bc 933f                      		push	line			; Save line register
0000bd 932f                      		push	count			; Save the count register
0000be 93ef                      		push	ZL				; Save Z pointer
0000bf 93ff                      		push	ZH				;
                                 	
0000c0 ec30                      		ldi		line, LCDline2	; Set Access to Line 2 of LCD
0000c1 d03a                      		rcall	LCDSetLine		; Set Z pointer to address of line 2 data
0000c2 e1e0                      		ldi		ZL, low(LCDLn2Addr)
0000c3 e0f1                      		ldi		ZH, high(LCDLn2Addr)
0000c4 d03c                      		rcall	LCDClrLine		; Call the Clear Line function
                                 
0000c5 91ff                      		pop		ZH				; Restore Z pointer
0000c6 91ef                      		pop		ZL				;
0000c7 912f                      		pop		count			; Restore the count register
0000c8 913f                      		pop		line			; Restore line register
0000c9 910f                      		pop		mpr				; Restore mpr
0000ca 9508                      		ret						; Return from Subroutine
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWriteByte
                                 ;* Desc:	This is a complex and low level function that
                                 ;*			allows any program to write any ASCII character
                                 ;*			(Byte) anywhere in the LCD Display.  There
                                 ;*			are several things that need to be initialized
                                 ;*			before this function is called:
                                 ;*		count - Holds the index value of the line to where
                                 ;*				the char is written, 0-15(39).  i.e. if 
                                 ;*				count has the value of 3, then the char is
                                 ;*				going to be written to the third element of
                                 ;*				the line.
                                 ;*		line  - Holds the line number that the char is going
                                 ;*				to be written to, (1 or 2).
                                 ;*		mpr	  - Contains the value of the ASCII character to 
                                 ;*				be written (0-255)
                                 ;*********************************************************
                                 LCDWriteByte:
0000cb 930f                      		push	mpr				; Save the mpr
0000cc 933f                      		push	line			; Save the line
0000cd 932f                      		push	count			; Save the count
                                 								; Preform sanity checks on count and line
0000ce 3228                      		cpi		count, 40		; Make sure count is within range
0000cf f450                      		brsh	LCDWriteByte_3	; Do nothing and exit function
0000d0 3031                      		cpi		line, 1			; If (line == 1)
0000d1 f411                      		brne	LCDWriteByte_1	; 
0000d2 e830                      		ldi		line, LCDLine1	; Load line 1 base LCD Address
0000d3 c003                      		rjmp	LCDWriteByte_2	; Continue on with function
                                 LCDWriteByte_1:					
0000d4 3032                      		cpi		line, 2			; If (line == 2)
0000d5 f421                      		brne	LCDWriteByte_3	; Do nothing and exit function
0000d6 ec30                      		ldi		line, LCDLine2	; Load line 2 base LCD Address
                                 
                                 LCDWriteByte_2:					; Write char to LCD
0000d7 0f32                      		add		line, count		; Set the correct LCD address
0000d8 d023                      		rcall	LCDSetLine		; Set the line address to LCD
0000d9 d042                      		rcall	LCDWriteChar	; Write Char to LCD Display		
                                 		
                                 LCDWriteByte_3:					; Exit Function
0000da 912f                      		pop		count			; Restore the count
0000db 913f                      		pop		line			; Restore the line
0000dc 910f                      		pop		mpr				; Restore the mpr
0000dd 9508                      		ret						; Return from function
                                 		 
                                 ;*******************************************************
                                 ;* Func:	Bin2ASCII
                                 ;* Desc:	Converts a binary number into an ASCII 
                                 ;*			text string equivalent. 
                                 ;*			- The binary number needs to be in the mpr
                                 ;*			- The Start Address of where the text will
                                 ;*			 	be placed needs to be in the X Register
                                 ;*			- The count of the characters created are 
                                 ;*				added to the count register
                                 ;*******************************************************
                                 Bin2ASCII:
0000de 930f                      		push	mpr				; save mpr
0000df 936f                      		push	r				; save r
0000e0 935f                      		push	q				; save q
0000e1 93bf                      		push	XH				; save X-pointer
0000e2 93af                      		push	XL				;
                                 
                                 		; Determine the range of mpr
0000e3 3604                      		cpi		mpr, 100		; is mpr >= 100
0000e4 f018                      		brlo	B2A_1			; goto next check
0000e5 e023                      		ldi		count, 3		; Three chars are written
0000e6 9613                      		adiw	XL, 3			; Increment X 3 address spaces
0000e7 c007                      		rjmp	B2A_3			; Continue with program
0000e8 300a                      B2A_1:	cpi		mpr, 10			; is mpr >= 10
0000e9 f018                      		brlo	B2A_2			; Continue with program
0000ea e022                      		ldi		count, 2		; Two chars are written
0000eb 9612                      		adiw	XL, 2			; Increment X 2 address spaces
0000ec c002                      		rjmp	B2A_3			; Continue with program
0000ed 9611                      B2A_2:	adiw	XL, 1			; Increment X 1 address space
0000ee e021                      		ldi		count, 1 		; One char is written
                                 
                                 B2A_3:	;Do-While statement that converts Binary to ASCII
0000ef d04a                      		rcall	div10			; Call the div10 function
0000f0 e300                      		ldi		mpr, '0'		; Set the base ASCII integer value
0000f1 0f06                      		add		mpr, r			; Create the ASCII integer value
0000f2 930e                      		st		-X, mpr			; Load ASCII value to memory
0000f3 2f05                      		mov		mpr, q			; Set mpr to quotiant value
0000f4 3000                      		cpi		mpr, 0			; does mpr == 0
0000f5 f7c9                      		brne	B2A_3			; do while (mpr != 0)
                                 
0000f6 91af                      		pop		XL				; restore X-pointer
0000f7 91bf                      		pop		XH				;
0000f8 915f                      		pop 	q				; restore q
0000f9 916f                      		pop		r				; restore r
0000fa 910f                      		pop		mpr				; restore mpr
0000fb 9508                      		ret						; return from function
                                 
                                 ;-------------------------------------------------------
                                 ;*******************************************************
                                 ;* Private LCD Driver Functions and Subroutines
                                 ;*	NOTE: It is not recommended to call these functions
                                 ;*	      or subroutines, only call the Public ones.
                                 ;*******************************************************
                                 ;-------------------------------------------------------
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDSetLine
                                 ;* Desc:	Change line to be written to 
                                 ;*******************************************************
                                 LCDSetLine:
0000fc 930f                      		push	mpr				; Save mpr
0000fd 2f03                      		mov		mpr,line		; Copy Command Data to mpr
0000fe d00f                      		rcall	LCDWriteCmd		; Write the Command
0000ff 910f                      		pop		mpr				; Restore the mpr
000100 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDClrLine
                                 ;* Desc:	Manually clears a single line within an LCD
                                 ;*			Display and Data Memory by writing 16 
                                 ;*			consecutive ASCII spaces $20 to both the LCD 
                                 ;*			and the memory.  The line to be cleared must
                                 ;*			first be set in the LCD and the Z pointer is
                                 ;*			pointing the first element in Data Memory
                                 ;*******************************************************
                                 LCDClrLine:
000101 e200                      		ldi		mpr, ' '		; The space char to be written
000102 e120                      		ldi		count, LCDMaxCnt; The character count
                                 LCDClrLine_1:
000103 9301                      		st		Z+, mpr			; Clear data memory element
000104 d017                      		rcall	LCDWriteChar	; Clear LCD memory element
000105 952a                      		dec		count			; Decrement the count
000106 f7e1                      		brne	LCDClrLine_1	; Continue untill all elements are cleared
000107 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWriteLine
                                 ;* Desc:	Writes a line of text to the LCD Display.
                                 ;*			This routine takes a data element pointed to
                                 ;*			by the Z-pointer and copies it to the LCD 
                                 ;*			Display for the duration of the line.  The
                                 ;*			line the Z-pointer must be set prior to the 
                                 ;*			function call.
                                 ;*******************************************************
                                 LCDWriteLine:
000108 e120                      		ldi		count, LCDMaxCnt; The character count
                                 LCDWriteLine_1:
000109 9101                      		ld		mpr, Z+			; Get the data element
00010a d011                      		rcall	LCDWriteChar	; Write element to LCD Display
00010b 952a                      		dec		count			; Decrement the count
00010c f7e1                      		brne	LCDWriteLine_1	; Continue untill all elements are written
00010d 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWriteCmd
                                 ;* Desc:	Write command that is in the mpr to LCD 
                                 ;*******************************************************
                                 LCDWriteCmd:
00010e 934f                      		push	type			; Save type register
00010f 931f                      		push	wait			; Save wait register
000110 e040                      		ldi		type, LCDCmd	; Set type to Command data
000111 d013                      		rcall	LCDWriteData	; Write data to LCD
000112 930f                      		push	mpr				; Save mpr register
000113 e002                      		ldi		mpr, 2			; Wait approx. 4.1 ms
                                 LCDWC_L1:
000114 ec1d                      		ldi		wait, 205		; Wait 2050 us
000115 d01c                      		rcall	LCDWait			;
000116 950a                      		dec		mpr				; The wait loop cont.
000117 f7e1                      		brne	LCDWC_L1		;
000118 910f                      		pop		mpr				; Restore mpr
000119 911f                      		pop		wait			; Restore wait register
00011a 914f                      		pop		type			; Restore type register
00011b 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWriteChar
                                 ;* Desc:	Write character data that is in the mpr
                                 ;*******************************************************
                                 LCDWriteChar:
00011c 934f                      		push	type			; Save type register
00011d 931f                      		push	wait			; Save the wait register
00011e e041                      		ldi		type, LCDTxt	; Set type to Text data
00011f d005                      		rcall	LCDWriteData	; Write data to LCD
000120 e110                      		ldi		wait, 16		; Delay 160 us
000121 d010                      		rcall	LCDWait			;
000122 911f                      		pop		wait			; Restore wait register
000123 914f                      		pop		type			; Restore type register
000124 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWriteData
                                 ;* Desc:	Write data or command to LCD 
                                 ;*******************************************************
                                 LCDWriteData:
000125 b94f                      		out		SPDR, type		; Send type to SP
000126 e012                      		ldi		wait, 2			; Wait 2 us
000127 d00a                      		rcall	LCDWait			; Call Wait function
000128 b90f                      		out		SPDR,mpr		; Send data to serial port
000129 e012                      		ldi		wait, 2			; Wait 2 us
00012a d007                      		rcall	LCDWait			; Call Wait function
00012b e018                      		ldi		wait, LCDPulse	; Use wait temporarially to 
00012c 9310 0062                 		sts		PORTF, wait		; to send write pulse to LCD
00012e e010                      		ldi		wait, $00		;
00012f 9310 0062                 		sts		PORTF, wait		;
000131 9508                      		ret						; Return from function
                                 
                                 ;*******************************************************
                                 ;* Func:	LCDWait
                                 ;* Desc:	A wait loop that is 10 + 159*wait cycles or
                                 ;*			roughly wait*10us.  Just initialize wait
                                 ;*			for the specific amount of time in 10us 
                                 ;*			intervals.
                                 ;*******************************************************
000132 930f                      LCDWait:push	mpr				; Save mpr
000133 e409                      LCDW_L1:ldi		mpr, $49		; Load with a 10us value
000134 950a                      LCDW_L2:dec		mpr				; Inner Wait Loop
000135 f7f1                      		brne	LCDW_L2
000136 951a                      		dec		wait			; Outer Wait Loop
000137 f7d9                      		brne	LCDW_L1
000138 910f                      		pop		mpr				; Restore mpr
000139 9508                      		ret						; Return from Wait Function
                                 
                                 ;*******************************************************
                                 ;*	Bin2ASCII routines that can be used as a psuedo-
                                 ;*			printf function to convert an 8-bit binary
                                 ;*			number into the unigned decimal ASCII text
                                 ;*******************************************************
                                 
                                 ;***********************************************************
                                 ;* Func:	div10
                                 ;* Desc:	Divides the value in the mpr by 10 and 
                                 ;*			puts the remander in the 'r' register and
                                 ;*			and the quotiant in the 'q' register.
                                 ;*	DO NOT modify this function, trust me, it does
                                 ;*	divide by 10 :)  ~DZ		
                                 ;***********************************************************
                                 div10:
00013a 920f                      		push	r0				; Save register
                                 
                                 		; q = mpr / 10 = mpr * 0.000110011001101b
00013b 2f50                      		mov		q, mpr			; q = mpr * 1.0b
00013c 9556                      		lsr		q				; q >> 2
00013d 9556                      		lsr		q				; q = mpr * 0.01b
00013e 0f50                      		add		q, mpr			; q = (q + mpr) >> 1
00013f 9556                      		lsr		q				; q = mpr * 0.101b
000140 0f50                      		add		q, mpr			; q = (q + mpr) >> 3
000141 9556                      		lsr		q
000142 9556                      		lsr		q
000143 9556                      		lsr		q				; q = mpr * 0.001101b
000144 0f50                      		add		q, mpr			; q = (q + mpr) >> 1
000145 9556                      		lsr		q				; q = mpr * 0.1001101b
000146 0f50                      		add		q, mpr			; q = (q + mpr) >> 3
000147 9556                      		lsr		q				
000148 9556                      		lsr		q
000149 9556                      		lsr		q				; q = mpr * 0.0011001101b
00014a 0f50                      		add		q, mpr			; q = (q + mpr) >> 1
00014b 9556                      		lsr		q				; q = mpr * 0.10011001101b
00014c 0f50                      		add		q, mpr			; q = (q + mpr) >> 4
00014d 9556                      		lsr		q
00014e 9556                      		lsr		q
00014f 9556                      		lsr		q
000150 9556                      		lsr		q				; q = mpr * 0.000110011001101b
                                 
                                 		; compute the remainder as r = i - 10 * q
                                 		; calculate r = q * 10 = q * 1010b
000151 2f65                      		mov		r, q			; r = q * 1
000152 0f66                      		lsl		r				; r << 2
000153 0f66                      		lsl		r				; r = q * 100b
000154 0f65                      		add		r, q			; r = (r + q) << 1
000155 0f66                      		lsl		r				; r = q * 1010b
000156 2e06                      		mov		r0, r			; r0 = 10 * q
000157 2f60                      		mov		r, mpr			; r = mpr
000158 1960                      		sub		r, r0			; r = mpr - 10 * q
                                 
                                 		; Fix any errors that occur
000159 306a                      div10_1:cpi		r, 10			; Compare with 10
00015a f018                      		brlo	div10_2			; do nothing if r < 10
00015b 9553                      		inc		q				; fix qoutient
00015c 506a                      		subi	r, 10			; fix remainder
00015d cffb                      		rjmp	div10_1			; Continue until error is corrected
                                 
00015e 900f                      div10_2:pop		r0				; Restore registers
00015f 9508                      
                                 ;***********************************************************
                                 ;*	Program Initialization
                                 ;***********************************************************
                                 INIT:							; The initialization routine
                                     ; Initialize the Stack Pointer
000160 ef0f                      		ldi		mpr, low(RAMEND)
000161 bf0d                      		out		SPL, mpr		; Load SPL with low byte of RAMEND
000162 e100                      		ldi		mpr, high(RAMEND)
000163 bf0e                      		out		SPH, mpr		; Load SPH with high byte of RAMEND
                                 
                                     ; Initialize Port B for output
000164 ef0f                      		ldi		mpr, $FF		; Set Port B Data Direction Register
000165 bb07                      		out		DDRB, mpr		; for output
000166 e000                      		ldi		mpr, $00		; Initialize Port B Data Register
000167 bb08                      		out		PORTB, mpr		; so all Port B outputs are low		
                                 
                                 	; Initialize Port D for input
000168 e000                      		ldi		mpr, $00		; Set Port D Data Direction Register
000169 bb01                      		out		DDRD, mpr		; for input
00016a ef0f                      		ldi		mpr, $FF		; Initialize Port D Data Register
00016b bb02                      		out		PORTD, mpr		; so all Port D inputs are Tri-State
                                 
                                 	; Initialize the LCD Display
00016c ded9                      		rcall LCDInit ; Initialize LCD Display
                                 
00016d 2455                      		clr zero
00016e e0a0                      		ldi XL, $00						; Pointing Y to $0100
00016f e0b1                      		ldi XH, $01						; Pointing Y to $0100
000170 2d05                      		mov mpr, zero ; load to-be-converted value into mpr
000171 df6c                      		rcall Bin2ASCII ; convert value in ASCII
000172 df15                      		rcall LCDWrLn1
000173 e1a0                      		LDI XL, $10						; Pointing Y to $0110
000174 e0b1                      		LDI XH, $01						; Pointing Y to $0110
000175 2d05                      		mov mpr, zero ; load to-be-converted value into mpr
000176 df67                      		rcall Bin2ASCII ; convert value in ASCII
000177 df20                      		RCALL LCDWrLn2
                                 
                                 		; Initialize external interrupts
                                 								; Set the Interrupt Sense Control to falling edge 
000178 e00a                      		ldi mpr, (1<<ISC01)|(0<<ISC00)|(1<<ISC11)|(0<<ISC10)|(0<<ISC20)|(0<<ISC21)|(0<<ISC30)|(0<<ISC31)
000179 9300 006a                 		sts EICRA, mpr			; Use sts, EICRA is in extended I/O space
                                 		; Set the External Interrupt Mask
00017b e00f                      		ldi mpr, (1<<INT0)|(1<<INT1)|(1<<INT2)|(1<<INT3)
00017c bf09                      		out EIMSK, mpr
                                 		; Turn on interrupts
00017d 2466                      		clr rcount
00017e 2477                      		clr lcount
00017f 9478                      		sei	; NOTE: This must be the last thing to do in the INIT function
                                 
                                 ;***********************************************************
                                 ;*	Main Program
                                 ;***********************************************************
                                 MAIN:							; The Main program
                                 		; Move Robot Forward
000180 e600                      		ldi mpr, MovFwd ; Load FWD command
000181 bb08                      		out PORTB, mpr ; Send to motors
000182 cffd                      		rjmp MAIN ; Infinite loop. End of program.
                                 
                                 ;***********************************************************
                                 ;*	Functions and Subroutines
                                 ;***********************************************************
                                 
                                 ;----------------------------------------------------------------
                                 ; Sub:	ClearRight
                                 ; Desc: Clears the counter for right wisker bumps and prints to
                                 ;		LCD
                                 ;----------------------------------------------------------------
                                 ClearRight:
000183 df27                      		rcall LCDClrLn1
000184 e0a0                      		ldi XL, $00						; Pointing Y to $0100
000185 e0b1                      		ldi XH, $01						; Pointing Y to $0100
000186 2c65                      		mov rcount, zero
000187 2d06                      		mov mpr, rcount ; load to-be-converted value into mpr
000188 df55                      		rcall Bin2ASCII ; convert value in ASCII
000189 defe                      		rcall LCDWrLn1
                                 
                                 		;clear interrupts
00018a e00f                      		ldi mpr,0b00001111
00018b bf08                      		out EIFR, mpr
00018c 9508                      	ret
                                 
                                 ;----------------------------------------------------------------
                                 ; Sub:	ClearLeft
                                 ; Desc: Clears the counter for left wisker bumps and prints to
                                 ;		LCD
                                 ;----------------------------------------------------------------
                                 ClearLeft:
00018d df2d                      		rcall LCDClrLn2
00018e e1a0                      		ldi XL, $10						; Pointing Y to $0110
00018f e0b1                      		ldi XH, $01						; Pointing Y to $0110
000190 2c75                      		mov lcount, zero
000191 2d07                      		mov mpr, lcount ; load to-be-converted value into mpr
000192 df4b                      		rcall Bin2ASCII ; convert value in ASCII
000193 df04                      		rcall LCDWrLn2
                                 
                                 		;clear interrupts
000194 e00f                      		ldi mpr,0b00001111
000195 bf08                      		out EIFR, mpr
000196 9508                      	ret
                                 
                                 ;----------------------------------------------------------------
                                 ; Sub:	HitRight
                                 ; Desc:	Handles functionality of the TekBot when the right whisker
                                 ;		is triggered.
                                 ;----------------------------------------------------------------
                                 HitRight:
000197 930f                      		push	mpr			; Save mpr register
000198 931f                      		push	waitcnt			; Save wait register
000199 b70f                      		in		mpr, SREG	; Save program state
00019a 930f                      		push	mpr			;
00019b 931f                      		push	waitcnt			; Wait Loop Counter
00019c 932f                      		push	ilcnt			; Inner Loop Counter
00019d 933f                      		push	olcnt			; Outer Loop Counter
                                 
                                 		; Move Backwards for a second
00019e e000                      		ldi		mpr, MovBck	; Load Move Backward command
00019f bb08                      		out		PORTB, mpr	; Send command to port
0001a0 e614                      		ldi		waitcnt, WTime	; Wait for 1 second
0001a1 d031                      		rcall	Wait2			; Call wait function
                                 
                                 		; Turn left for a second
0001a2 e200                      		ldi		mpr, TurnL	; Load Turn Left Command
0001a3 bb08                      		out		PORTB, mpr	; Send command to port
0001a4 e614                      		ldi		waitcnt, WTime	; Wait for 1 second
0001a5 d02d                      		rcall	Wait2		; Call wait function
                                 
                                 		; Move Forward again	
0001a6 e600                      		ldi		mpr, MovFwd	; Load Move Forward command
0001a7 bb08                      		out		PORTB, mpr	; Send command to port
                                 
                                 		;add to counter, binary to ascii, print to lcd
0001a8 9463                      		inc rcount
                                 
                                 		; load parameters for Bin2ASCII
0001a9 e0a0                      		ldi XL, $00						; Pointing Y to $0100
0001aa e0b1                      		ldi XH, $01						; Pointing Y to $0100
0001ab 2d06                      		mov mpr, rcount ; load to-be-converted value into mpr
                                 
0001ac df31                      		rcall Bin2ASCII ; convert value in ASCII
                                 
0001ad deda                      		RCALL LCDWrLn1
                                 
                                 		;clear interrupts
0001ae e00f                      		ldi mpr,0b00001111
0001af bf08                      		out EIFR, mpr
                                 
0001b0 911f                      		pop	waitcnt			; Wait Loop Counter
0001b1 912f                      		pop	ilcnt			; Inner Loop Counter
0001b2 913f                      		pop	olcnt			; Outer Loop Counter
0001b3 910f                      		pop		mpr		; Restore program state
0001b4 bf0f                      		out		SREG, mpr	;
0001b5 911f                      		pop		waitcnt		; Restore wait register
0001b6 910f                      		pop		mpr		; Restore mpr
0001b7 9508                      		ret				; Return from subroutine
                                 
                                 ;----------------------------------------------------------------
                                 ; Sub:	HitLeft
                                 ; Desc:	Handles functionality of the TekBot when the left whisker
                                 ;		is triggered.
                                 ;----------------------------------------------------------------
                                 HitLeft:
0001b8 930f                      		push	mpr			; Save mpr register
0001b9 931f                      		push	waitcnt			; Save wait register
0001ba b70f                      		in		mpr, SREG	; Save program state
0001bb 930f                      		push	mpr			;
                                 
                                 		; Move Backwards for a second
0001bc e000                      		ldi		mpr, MovBck	; Load Move Backward command
0001bd bb08                      		out		PORTB, mpr	; Send command to port
0001be e614                      		ldi		waitcnt, WTime	; Wait for 1 second
0001bf d013                      		rcall	Wait2			; Call wait function
                                 
                                 		; Turn right for a second
0001c0 e400                      		ldi		mpr, TurnR	; Load Turn Left Command
0001c1 bb08                      		out		PORTB, mpr	; Send command to port
0001c2 e614                      		ldi		waitcnt, WTime	; Wait for 1 second
0001c3 d00f                      		rcall	Wait2			; Call wait function
                                 
                                 		; Move Forward again	
0001c4 e600                      		ldi		mpr, MovFwd	; Load Move Forward command
0001c5 bb08                      		out		PORTB, mpr	; Send command to port
                                 
0001c6 910f                      		pop		mpr		; Restore program state
0001c7 bf0f                      		out		SREG, mpr	;
0001c8 911f                      		pop		waitcnt		; Restore wait register
0001c9 910f                      		pop		mpr		; Restore mpr
                                 
                                 		;add to counter, binary to ascii, print to lcd
0001ca 9473                      		inc lcount
                                 
                                 		; load parameters for Bin2ASCII
0001cb e1a0                      		ldi XL, $10						; Pointing Y to $0100
0001cc e0b1                      		ldi XH, $01						; Pointing Y to $0100
0001cd 2d07                      		mov mpr, lcount ; load to-be-converted value into mpr
                                 
0001ce df0f                      		rcall Bin2ASCII ; convert value in ASCII
                                 
0001cf dec8                      		RCALL LCDWrLn2
                                 
                                 		;clear interrupts
0001d0 e00f                      		ldi mpr,0b00001111
0001d1 bf08                      		out EIFR, mpr
                                 
0001d2 9508                      		ret				; Return from subroutine
                                 
                                 ;----------------------------------------------------------------
                                 ; Sub:	Wait
                                 ; Desc:	A wait loop that is 16 + 159975*waitcnt cycles or roughly 
                                 ;		waitcnt*10ms.  Just initialize wait for the specific amount 
                                 ;		of time in 10ms intervals. Here is the general eqaution
                                 ;		for the number of clock cycles in the wait loop:
                                 ;			((3 * ilcnt + 3) * olcnt + 3) * waitcnt + 13 + call
                                 ;----------------------------------------------------------------
                                 Wait2:
0001d3 931f                      		push	waitcnt			; Save wait register
0001d4 932f                      		push	ilcnt			; Save ilcnt register
0001d5 933f                      		push	olcnt			; Save olcnt register
                                 
0001d6 ee30                      Loop:	ldi		olcnt, 224		; load olcnt register
0001d7 ee2d                      OLoop:	ldi		ilcnt, 237		; load ilcnt register
0001d8 952a                      ILoop:	dec		ilcnt			; decrement ilcnt
0001d9 f7f1                      		brne	ILoop			; Continue Inner Loop
0001da 953a                      		dec		olcnt		; decrement olcnt
0001db f7d9                      		brne	OLoop			; Continue Outer Loop
0001dc 951a                      		dec		waitcnt		; Decrement wait 
0001dd f7c1                      		brne	Loop			; Continue Wait loop	
                                 
0001de 913f                      		pop		olcnt		; Restore olcnt register
0001df 912f                      		pop		ilcnt		; Restore ilcnt register
0001e0 911f                      		pop		waitcnt		; Restore wait register
0001e1 9508                      		ret				; Return from subroutine
                                 
                                 ;***********************************************************
                                 ;*	Stored Program Data
                                 ;***********************************************************
                                 
                                 ; Enter any stored data you might need here
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega128" register use summary:
x  :   1 y  :   0 z  :   2 r0 :   4 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   5 r6 :   5 r7 :   5 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 143 r17:  29 r18:  25 r19:  26 r20:   7 
r21:  28 r22:  13 r23:   0 r24:   0 r25:   0 r26:  11 r27:   8 r28:   0 
r29:   0 r30:  12 r31:  12 
Registers used: 17 out of 35 (48.6%)

"ATmega128" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   9 adiw  :   3 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 brlt  :   0 brmi  :   0 
brne  :  12 brpl  :   0 brsh  :   1 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   3 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   7 cpse  :   0 dec   :   9 elpm  :   0 eor   :   0 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   3 inc   :   3 
jmp   :   0 ld    :   1 ldd   :   0 ldi   :  91 lds   :   0 lpm   :   0 
lsl   :   3 lsr   :  15 mov   :  14 movw  :   0 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  33 
pop   :  51 push  :  51 rcall :  54 ret   :  22 reti  :   4 rjmp  :   6 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   0 
sbis  :   0 sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   2 std   :   0 
sts   :   9 sub   :   1 subi  :   1 swap  :   0 tst   :   0 wdr   :   0 

Instructions used: 27 out of 114 (23.7%)

"ATmega128" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003c4    842      0    842  131072   0.6%
[.dseg] 0x000100 0x000100      0      0      0    4096   0.0%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 3 warnings
